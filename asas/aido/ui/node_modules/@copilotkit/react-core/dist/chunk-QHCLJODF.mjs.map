{"version":3,"sources":["../src/hooks/use-copilot-chat_internal.ts"],"sourcesContent":["import { useRef, useEffect, useCallback, useState, useMemo } from \"react\";\nimport { AgentSession, useCopilotContext, CopilotContextParams } from \"../context/copilot-context\";\nimport { useCopilotMessagesContext, CopilotMessagesContextParams } from \"../context\";\nimport { SystemMessageFunction } from \"../types\";\nimport { useChat, AppendMessageOptions } from \"./use-chat\";\nimport { defaultCopilotContextCategories } from \"../components\";\nimport { CoAgentStateRenderHandlerArguments } from \"@copilotkit/shared\";\nimport { useAsyncCallback } from \"../components/error-boundary/error-utils\";\nimport { reloadSuggestions as generateSuggestions } from \"../utils\";\nimport type { SuggestionItem } from \"../utils\";\n\nimport { Message } from \"@copilotkit/shared\";\nimport {\n  Role as gqlRole,\n  TextMessage,\n  aguiToGQL,\n  gqlToAGUI,\n  Message as DeprecatedGqlMessage,\n} from \"@copilotkit/runtime-client-gql\";\nimport { useLangGraphInterruptRender } from \"./use-langgraph-interrupt-render\";\n\nexport interface UseCopilotChatOptions {\n  /**\n   * A unique identifier for the chat. If not provided, a random one will be\n   * generated. When provided, the `useChat` hook with the same `id` will\n   * have shared states across components.\n   */\n  id?: string;\n\n  /**\n   * HTTP headers to be sent with the API request.\n   */\n  headers?: Record<string, string> | Headers;\n\n  /**\n   * Initial messages to populate the chat with.\n   */\n  initialMessages?: Message[];\n\n  /**\n   * A function to generate the system message. Defaults to `defaultSystemMessage`.\n   */\n  makeSystemMessage?: SystemMessageFunction;\n\n  /**\n   * Disables inclusion of CopilotKitâ€™s default system message. When true, no system message is sent (this also suppresses any custom message from <code>makeSystemMessage</code>).\n   */\n  disableSystemMessage?: boolean;\n}\n\nexport interface MCPServerConfig {\n  endpoint: string;\n  apiKey?: string;\n}\n\nexport interface UseCopilotChatReturn {\n  /**\n   * @deprecated use `messages` instead, this is an old non ag-ui version of the messages\n   * Array of messages currently visible in the chat interface\n   *\n   * This is the visible messages, not the raw messages from the runtime client.\n   */\n  visibleMessages: DeprecatedGqlMessage[];\n\n  /**\n   * The messages that are currently in the chat in AG-UI format.\n   */\n  messages: Message[];\n\n  /** @deprecated use `sendMessage` in `useCopilotChatHeadless_c` instead. This will be removed in a future major version. */\n  appendMessage: (message: DeprecatedGqlMessage, options?: AppendMessageOptions) => Promise<void>;\n\n  /**\n   * Send a new message to the chat\n   *\n   * ```tsx\n   * await sendMessage({\n   *   id: \"123\",\n   *   role: \"user\",\n   *   content: \"Hello, process this request\",\n   * });\n   * ```\n   */\n  sendMessage: (message: Message, options?: AppendMessageOptions) => Promise<void>;\n\n  /**\n   * Replace all messages in the chat\n   *\n   * ```tsx\n   * setMessages([\n   *   { id: \"123\", role: \"user\", content: \"Hello, process this request\" },\n   *   { id: \"456\", role: \"assistant\", content: \"Hello, I'm the assistant\" },\n   * ]);\n   * ```\n   *\n   * **Deprecated** non-ag-ui version:\n   *\n   * ```tsx\n   * setMessages([\n   *   new TextMessage({\n   *     content: \"Hello, process this request\",\n   *     role: gqlRole.User,\n   *   }),\n   *   new TextMessage({\n   *     content: \"Hello, I'm the assistant\",\n   *     role: gqlRole.Assistant,\n   * ]);\n   * ```\n   *\n   */\n  setMessages: (messages: Message[] | DeprecatedGqlMessage[]) => void;\n\n  /**\n   * Remove a specific message by ID\n   *\n   * ```tsx\n   * deleteMessage(\"123\");\n   * ```\n   */\n  deleteMessage: (messageId: string) => void;\n\n  /**\n   * Regenerate the response for a specific message\n   *\n   * ```tsx\n   * reloadMessages(\"123\");\n   * ```\n   */\n  reloadMessages: (messageId: string) => Promise<void>;\n\n  /**\n   * Stop the current message generation\n   *\n   * ```tsx\n   * if (isLoading) {\n   *   stopGeneration();\n   * }\n   * ```\n   */\n  stopGeneration: () => void;\n\n  /**\n   * Clear all messages and reset chat state\n   *\n   * ```tsx\n   * reset();\n   * console.log(messages); // []\n   * ```\n   */\n  reset: () => void;\n\n  /**\n   * Whether the chat is currently generating a response\n   *\n   * ```tsx\n   * if (isLoading) {\n   *   console.log(\"Loading...\");\n   * } else {\n   *   console.log(\"Not loading\");\n   * }\n   */\n  isLoading: boolean;\n\n  /** Manually trigger chat completion (advanced usage) */\n  runChatCompletion: () => Promise<Message[]>;\n\n  /** MCP (Model Context Protocol) server configurations */\n  mcpServers: MCPServerConfig[];\n\n  /** Update MCP server configurations */\n  setMcpServers: (mcpServers: MCPServerConfig[]) => void;\n\n  /**\n   * Current suggestions array\n   * Use this to read the current suggestions or in conjunction with setSuggestions for manual control\n   */\n  suggestions: SuggestionItem[];\n\n  /**\n   * Manually set suggestions\n   * Useful for manual mode or custom suggestion workflows\n   */\n  setSuggestions: (suggestions: SuggestionItem[]) => void;\n\n  /**\n   * Trigger AI-powered suggestion generation\n   * Uses configurations from useCopilotChatSuggestions hooks\n   * Respects global debouncing - only one generation can run at a time\n   *\n   * ```tsx\n   * generateSuggestions();\n   * console.log(suggestions); // [suggestion1, suggestion2, suggestion3]\n   * ```\n   */\n  generateSuggestions: () => Promise<void>;\n\n  /**\n   * Clear all current suggestions\n   * Also resets suggestion generation state\n   */\n  resetSuggestions: () => void;\n\n  /** Whether suggestions are currently being generated */\n  isLoadingSuggestions: boolean;\n\n  /** Interrupt content for human-in-the-loop workflows */\n  interrupt: string | React.ReactElement | null;\n}\n\nlet globalSuggestionPromise: Promise<void> | null = null;\n\nexport function useCopilotChat(options: UseCopilotChatOptions = {}): UseCopilotChatReturn {\n  const makeSystemMessage = options.makeSystemMessage ?? defaultSystemMessage;\n  const {\n    getContextString,\n    getFunctionCallHandler,\n    copilotApiConfig,\n    isLoading,\n    setIsLoading,\n    chatInstructions,\n    actions,\n    coagentStatesRef,\n    setCoagentStatesWithRef,\n    coAgentStateRenders,\n    agentSession,\n    setAgentSession,\n    forwardedParameters,\n    agentLock,\n    threadId,\n    setThreadId,\n    runId,\n    setRunId,\n    chatAbortControllerRef,\n    extensions,\n    setExtensions,\n    langGraphInterruptAction,\n    setLangGraphInterruptAction,\n    chatSuggestionConfiguration,\n\n    runtimeClient,\n  } = useCopilotContext();\n  const { messages, setMessages, suggestions, setSuggestions } = useCopilotMessagesContext();\n\n  // Simple state for MCP servers (keep for interface compatibility)\n  const [mcpServers, setLocalMcpServers] = useState<MCPServerConfig[]>([]);\n\n  // Basic suggestion state for programmatic control\n  const suggestionsAbortControllerRef = useRef<AbortController | null>(null);\n  const isLoadingSuggestionsRef = useRef<boolean>(false);\n\n  const abortSuggestions = useCallback(\n    (clear: boolean = true) => {\n      suggestionsAbortControllerRef.current?.abort(\"suggestions aborted by user\");\n      suggestionsAbortControllerRef.current = null;\n      if (clear) {\n        setSuggestions([]);\n      }\n    },\n    [setSuggestions],\n  );\n\n  // Memoize context with stable dependencies only\n  const stableContext = useMemo(() => {\n    return {\n      actions,\n      copilotApiConfig,\n      chatSuggestionConfiguration,\n      messages,\n      setMessages,\n      getContextString,\n      runtimeClient,\n    };\n  }, [\n    JSON.stringify(Object.keys(actions)),\n    copilotApiConfig.chatApiEndpoint,\n    messages.length,\n    Object.keys(chatSuggestionConfiguration).length,\n  ]);\n\n  // Programmatic suggestion generation function\n  const generateSuggestionsFunc = useCallback(async () => {\n    // If a global suggestion is running, ignore this call\n    if (globalSuggestionPromise) {\n      return globalSuggestionPromise;\n    }\n\n    globalSuggestionPromise = (async () => {\n      try {\n        abortSuggestions();\n        isLoadingSuggestionsRef.current = true;\n        suggestionsAbortControllerRef.current = new AbortController();\n\n        setSuggestions([]);\n\n        await generateSuggestions(\n          stableContext as CopilotContextParams & CopilotMessagesContextParams,\n          chatSuggestionConfiguration,\n          setSuggestions,\n          suggestionsAbortControllerRef,\n        );\n      } catch (error) {\n        // Re-throw to allow caller to handle the error\n        throw error;\n      } finally {\n        isLoadingSuggestionsRef.current = false;\n        globalSuggestionPromise = null;\n      }\n    })();\n\n    return globalSuggestionPromise;\n  }, [stableContext, chatSuggestionConfiguration, setSuggestions, abortSuggestions]);\n\n  const resetSuggestions = useCallback(() => {\n    setSuggestions([]);\n  }, [setSuggestions]);\n\n  // MCP servers logic\n  useEffect(() => {\n    if (mcpServers.length > 0) {\n      const serversCopy = [...mcpServers];\n      copilotApiConfig.mcpServers = serversCopy;\n      if (!copilotApiConfig.properties) {\n        copilotApiConfig.properties = {};\n      }\n      copilotApiConfig.properties.mcpServers = serversCopy;\n    }\n  }, [mcpServers, copilotApiConfig]);\n\n  const setMcpServers = useCallback((servers: MCPServerConfig[]) => {\n    setLocalMcpServers(servers);\n  }, []);\n\n  // Move these function declarations above the useChat call\n  const onCoAgentStateRender = useAsyncCallback(\n    async (args: CoAgentStateRenderHandlerArguments) => {\n      const { name, nodeName, state } = args;\n      let action = Object.values(coAgentStateRenders).find(\n        (action) => action.name === name && action.nodeName === nodeName,\n      );\n      if (!action) {\n        action = Object.values(coAgentStateRenders).find(\n          (action) => action.name === name && !action.nodeName,\n        );\n      }\n      if (action) {\n        await action.handler?.({ state, nodeName });\n      }\n    },\n    [coAgentStateRenders],\n  );\n\n  const makeSystemMessageCallback = useCallback(() => {\n    const systemMessageMaker = makeSystemMessage || defaultSystemMessage;\n    // this always gets the latest context string\n    const contextString = getContextString([], defaultCopilotContextCategories); // TODO: make the context categories configurable\n\n    return new TextMessage({\n      content: systemMessageMaker(contextString, chatInstructions),\n      role: gqlRole.System,\n    });\n  }, [getContextString, makeSystemMessage, chatInstructions]);\n\n  const deleteMessage = useCallback(\n    (messageId: string) => {\n      setMessages((prev) => prev.filter((message) => message.id !== messageId));\n    },\n    [setMessages],\n  );\n\n  // Get chat helpers with updated config\n  const { append, reload, stop, runChatCompletion } = useChat({\n    ...options,\n    actions: Object.values(actions),\n    copilotConfig: copilotApiConfig,\n    initialMessages: aguiToGQL(options.initialMessages || []),\n    onFunctionCall: getFunctionCallHandler(),\n    onCoAgentStateRender,\n    messages,\n    setMessages,\n    makeSystemMessageCallback,\n    isLoading,\n    setIsLoading,\n    coagentStatesRef,\n    setCoagentStatesWithRef,\n    agentSession,\n    setAgentSession,\n    forwardedParameters,\n    threadId,\n    setThreadId,\n    runId,\n    setRunId,\n    chatAbortControllerRef,\n    agentLock,\n    extensions,\n    setExtensions,\n    langGraphInterruptAction,\n    setLangGraphInterruptAction,\n    disableSystemMessage: options.disableSystemMessage,\n  });\n\n  const latestAppend = useUpdatedRef(append);\n  const latestAppendFunc = useAsyncCallback(\n    async (message: DeprecatedGqlMessage, options?: AppendMessageOptions) => {\n      abortSuggestions(options?.clearSuggestions);\n      return await latestAppend.current(message, options);\n    },\n    [latestAppend],\n  );\n\n  const latestSendMessageFunc = useAsyncCallback(\n    async (message: Message, options?: AppendMessageOptions) => {\n      abortSuggestions(options?.clearSuggestions);\n      return await latestAppend.current(aguiToGQL([message])[0] as DeprecatedGqlMessage, options);\n    },\n    [latestAppend],\n  );\n\n  const latestReload = useUpdatedRef(reload);\n  const latestReloadFunc = useAsyncCallback(\n    async (messageId: string) => {\n      return await latestReload.current(messageId);\n    },\n    [latestReload],\n  );\n\n  const latestStop = useUpdatedRef(stop);\n  const latestStopFunc = useCallback(() => {\n    return latestStop.current();\n  }, [latestStop]);\n\n  const latestDelete = useUpdatedRef(deleteMessage);\n  const latestDeleteFunc = useCallback(\n    (messageId: string) => {\n      return latestDelete.current(messageId);\n    },\n    [latestDelete],\n  );\n\n  const latestSetMessages = useUpdatedRef(setMessages);\n  const latestSetMessagesFunc = useCallback(\n    (messages: Message[] | DeprecatedGqlMessage[]) => {\n      if (messages.every((message) => message instanceof DeprecatedGqlMessage)) {\n        return latestSetMessages.current(messages as DeprecatedGqlMessage[]);\n      }\n      return latestSetMessages.current(aguiToGQL(messages));\n    },\n    [latestSetMessages],\n  );\n\n  const latestRunChatCompletion = useUpdatedRef(runChatCompletion);\n  const latestRunChatCompletionFunc = useAsyncCallback(async () => {\n    return await latestRunChatCompletion.current!();\n  }, [latestRunChatCompletion]);\n\n  const reset = useCallback(() => {\n    latestStopFunc();\n    setMessages([]);\n    setRunId(null);\n    setCoagentStatesWithRef({});\n    let initialAgentSession: AgentSession | null = null;\n    if (agentLock) {\n      initialAgentSession = {\n        agentName: agentLock,\n      };\n    }\n    setAgentSession(initialAgentSession);\n    // Reset suggestions when chat is reset\n    resetSuggestions();\n  }, [\n    latestStopFunc,\n    setMessages,\n    setThreadId,\n    setCoagentStatesWithRef,\n    setAgentSession,\n    agentLock,\n    resetSuggestions,\n  ]);\n\n  const latestReset = useUpdatedRef(reset);\n  const latestResetFunc = useCallback(() => {\n    return latestReset.current();\n  }, [latestReset]);\n\n  const interrupt = useLangGraphInterruptRender();\n\n  return {\n    visibleMessages: messages,\n    messages: gqlToAGUI(messages, actions, coAgentStateRenders),\n    sendMessage: latestSendMessageFunc,\n    appendMessage: latestAppendFunc,\n    setMessages: latestSetMessagesFunc,\n    reloadMessages: latestReloadFunc,\n    stopGeneration: latestStopFunc,\n    reset: latestResetFunc,\n    deleteMessage: latestDeleteFunc,\n    runChatCompletion: latestRunChatCompletionFunc,\n    isLoading,\n    mcpServers,\n    setMcpServers,\n    suggestions,\n    setSuggestions,\n    generateSuggestions: generateSuggestionsFunc,\n    resetSuggestions,\n    isLoadingSuggestions: isLoadingSuggestionsRef.current,\n    interrupt,\n  };\n}\n\n// store `value` in a ref and update\n// it whenever it changes.\nfunction useUpdatedRef<T>(value: T) {\n  const ref = useRef(value);\n\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n\n  return ref;\n}\n\nexport function defaultSystemMessage(\n  contextString: string,\n  additionalInstructions?: string,\n): string {\n  return (\n    `\nPlease act as an efficient, competent, conscientious, and industrious professional assistant.\n\nHelp the user achieve their goals, and you do so in a way that is as efficient as possible, without unnecessary fluff, but also without sacrificing professionalism.\nAlways be polite and respectful, and prefer brevity over verbosity.\n\nThe user has provided you with the following context:\n\\`\\`\\`\n${contextString}\n\\`\\`\\`\n\nThey have also provided you with functions you can call to initiate actions on their behalf, or functions you can call to receive more information.\n\nPlease assist them as best you can.\n\nYou can ask them for clarifying questions if needed, but don't be annoying about it. If you can reasonably 'fill in the blanks' yourself, do so.\n\nIf you would like to call a function, call it without saying anything else.\nIn case of a function error:\n- If this error stems from incorrect function parameters or syntax, you may retry with corrected arguments.\n- If the error's source is unclear or seems unrelated to your input, do not attempt further retries.\n` + (additionalInstructions ? `\\n\\n${additionalInstructions}` : \"\")\n  );\n}\n"],"mappings":"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","names":["_a","action","options","messages"]}