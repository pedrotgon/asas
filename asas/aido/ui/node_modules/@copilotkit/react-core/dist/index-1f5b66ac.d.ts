import { a as CopilotContextParams } from './copilot-context-cf9de848.js';
import { Message } from '@copilotkit/runtime-client-gql';
import React$1 from 'react';
import { CopilotChatSuggestionConfiguration } from './types/chat-suggestion-configuration.js';

/**
 * Suggestions utility functions for CopilotKit
 *
 * This module handles the generation of chat suggestions with optimized error handling
 * and streaming validation to prevent infinite retry loops and console spam.
 */

interface SuggestionItem {
    title: string;
    message: string;
    partial?: boolean;
    className?: string;
}
declare const reloadSuggestions: (context: CopilotContextParams & CopilotMessagesContextParams, chatSuggestionConfiguration: {
    [key: string]: CopilotChatSuggestionConfiguration;
}, setCurrentSuggestions: (suggestions: SuggestionItem[]) => void, abortControllerRef: React.MutableRefObject<AbortController | null>) => Promise<void>;

/**
 * An internal context to separate the messages state (which is constantly changing) from the rest of CopilotKit context
 */

interface CopilotMessagesContextParams {
    messages: Message[];
    setMessages: React$1.Dispatch<React$1.SetStateAction<Message[]>>;
    suggestions: SuggestionItem[];
    setSuggestions: React$1.Dispatch<React$1.SetStateAction<SuggestionItem[]>>;
}
declare const CopilotMessagesContext: React$1.Context<CopilotMessagesContextParams>;
declare function useCopilotMessagesContext(): CopilotMessagesContextParams;

export { CopilotMessagesContext as C, SuggestionItem as S, CopilotMessagesContextParams as a, reloadSuggestions as r, useCopilotMessagesContext as u };
