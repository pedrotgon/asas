{"version":3,"sources":["../src/index.ts","../src/client/CopilotRuntimeClient.ts","../package.json","../src/graphql/@generated/graphql.ts","../src/graphql/@generated/gql.ts","../src/graphql/definitions/mutations.ts","../src/graphql/definitions/queries.ts","../src/client/types.ts","../src/client/conversion.ts","../src/message-conversion/agui-to-gql.ts","../src/message-conversion/gql-to-agui.ts"],"sourcesContent":["export * from \"./client\";\nexport * from \"./graphql/@generated/graphql\";\nexport * from \"./message-conversion\";\nexport type { LangGraphInterruptEvent } from \"./client\";\n","import { Client, cacheExchange, fetchExchange } from \"@urql/core\";\nimport * as packageJson from \"../../package.json\";\nimport {\n  AvailableAgentsQuery,\n  GenerateCopilotResponseMutation,\n  GenerateCopilotResponseMutationVariables,\n  LoadAgentStateQuery,\n} from \"../graphql/@generated/graphql\";\nimport { generateCopilotResponseMutation } from \"../graphql/definitions/mutations\";\nimport { getAvailableAgentsQuery, loadAgentStateQuery } from \"../graphql/definitions/queries\";\nimport { OperationResultSource, OperationResult } from \"urql\";\nimport {\n  ResolvedCopilotKitError,\n  CopilotKitLowLevelError,\n  CopilotKitError,\n  CopilotKitVersionMismatchError,\n  getPossibleVersionMismatch,\n} from \"@copilotkit/shared\";\n\nconst createFetchFn =\n  (signal?: AbortSignal, handleGQLWarning?: (warning: string) => void) =>\n  async (...args: Parameters<typeof fetch>) => {\n    // @ts-expect-error -- since this is our own header, TS will not recognize\n    const publicApiKey = args[1]?.headers?.[\"x-copilotcloud-public-api-key\"];\n    try {\n      const result = await fetch(args[0], { ...(args[1] ?? {}), signal });\n\n      // No mismatch checking if cloud is being used\n      const mismatch = publicApiKey\n        ? null\n        : await getPossibleVersionMismatch({\n            runtimeVersion: result.headers.get(\"X-CopilotKit-Runtime-Version\")!,\n            runtimeClientGqlVersion: packageJson.version,\n          });\n      if (result.status !== 200) {\n        if (result.status >= 400 && result.status <= 500) {\n          if (mismatch) {\n            throw new CopilotKitVersionMismatchError(mismatch);\n          }\n\n          throw new ResolvedCopilotKitError({ status: result.status });\n        }\n      }\n\n      if (mismatch && handleGQLWarning) {\n        handleGQLWarning(mismatch.message);\n      }\n\n      return result;\n    } catch (error) {\n      // Let abort error pass through. It will be suppressed later\n      if (\n        (error as Error).message.includes(\"BodyStreamBuffer was aborted\") ||\n        (error as Error).message.includes(\"signal is aborted without reason\")\n      ) {\n        throw error;\n      }\n      if (error instanceof CopilotKitError) {\n        throw error;\n      }\n      throw new CopilotKitLowLevelError({ error: error as Error, url: args[0] as string });\n    }\n  };\n\nexport interface CopilotRuntimeClientOptions {\n  url: string;\n  publicApiKey?: string;\n  headers?: Record<string, string>;\n  credentials?: RequestCredentials;\n  handleGQLErrors?: (error: Error) => void;\n  handleGQLWarning?: (warning: string) => void;\n}\n\nexport class CopilotRuntimeClient {\n  client: Client;\n  public handleGQLErrors?: (error: Error) => void;\n  public handleGQLWarning?: (warning: string) => void;\n\n  constructor(options: CopilotRuntimeClientOptions) {\n    const headers: Record<string, string> = {};\n\n    this.handleGQLErrors = options.handleGQLErrors;\n    this.handleGQLWarning = options.handleGQLWarning;\n\n    if (options.headers) {\n      Object.assign(headers, options.headers);\n    }\n\n    if (options.publicApiKey) {\n      headers[\"x-copilotcloud-public-api-key\"] = options.publicApiKey;\n    }\n\n    this.client = new Client({\n      url: options.url,\n      exchanges: [cacheExchange, fetchExchange],\n      fetchOptions: {\n        headers: {\n          ...headers,\n          \"X-CopilotKit-Runtime-Client-GQL-Version\": packageJson.version,\n        },\n        ...(options.credentials ? { credentials: options.credentials } : {}),\n      },\n    });\n  }\n\n  generateCopilotResponse({\n    data,\n    properties,\n    signal,\n  }: {\n    data: GenerateCopilotResponseMutationVariables[\"data\"];\n    properties?: GenerateCopilotResponseMutationVariables[\"properties\"];\n    signal?: AbortSignal;\n  }) {\n    const fetchFn = createFetchFn(signal, this.handleGQLWarning);\n    const result = this.client.mutation<\n      GenerateCopilotResponseMutation,\n      GenerateCopilotResponseMutationVariables\n    >(generateCopilotResponseMutation, { data, properties }, { fetch: fetchFn });\n\n    return result;\n  }\n\n  public asStream<S, T>(source: OperationResultSource<OperationResult<S, { data: T }>>) {\n    const handleGQLErrors = this.handleGQLErrors;\n    return new ReadableStream<S>({\n      start(controller) {\n        source.subscribe(({ data, hasNext, error }) => {\n          if (error) {\n            if (\n              error.message.includes(\"BodyStreamBuffer was aborted\") ||\n              error.message.includes(\"signal is aborted without reason\")\n            ) {\n              // close the stream if there is no next item\n              if (!hasNext) controller.close();\n\n              //suppress this specific error\n              console.warn(\"Abort error suppressed\");\n              return;\n            }\n\n            // Handle structured errors specially - check if it's a CopilotKitError with visibility\n            if ((error as any).extensions?.visibility) {\n              // Create a synthetic GraphQL error with the structured error info\n              const syntheticError = {\n                ...error,\n                graphQLErrors: [\n                  {\n                    message: error.message,\n                    extensions: (error as any).extensions,\n                  },\n                ],\n              };\n\n              if (handleGQLErrors) {\n                handleGQLErrors(syntheticError);\n              }\n              return; // Don't close the stream for structured errors, let the error handler decide\n            }\n\n            controller.error(error);\n            if (handleGQLErrors) {\n              handleGQLErrors(error);\n            }\n          } else {\n            controller.enqueue(data);\n            if (!hasNext) {\n              controller.close();\n            }\n          }\n        });\n      },\n    });\n  }\n\n  availableAgents() {\n    const fetchFn = createFetchFn();\n    return this.client.query<AvailableAgentsQuery>(getAvailableAgentsQuery, {}, { fetch: fetchFn });\n  }\n\n  loadAgentState(data: { threadId: string; agentName: string }) {\n    const fetchFn = createFetchFn();\n    const result = this.client.query<LoadAgentStateQuery>(\n      loadAgentStateQuery,\n      { data },\n      { fetch: fetchFn },\n    );\n\n    // Add error handling for GraphQL errors - similar to generateCopilotResponse\n    result\n      .toPromise()\n      .then(({ error }) => {\n        if (error && this.handleGQLErrors) {\n          this.handleGQLErrors(error);\n        }\n      })\n      .catch(() => {}); // Suppress promise rejection warnings\n\n    return result;\n  }\n\n  static removeGraphQLTypename(data: any) {\n    if (Array.isArray(data)) {\n      data.forEach((item) => CopilotRuntimeClient.removeGraphQLTypename(item));\n    } else if (typeof data === \"object\" && data !== null) {\n      delete data.__typename;\n      Object.keys(data).forEach((key) => {\n        if (typeof data[key] === \"object\" && data[key] !== null) {\n          CopilotRuntimeClient.removeGraphQLTypename(data[key]);\n        }\n      });\n    }\n    return data;\n  }\n}\n","{\n  \"name\": \"@copilotkit/runtime-client-gql\",\n  \"private\": false,\n  \"homepage\": \"https://github.com/CopilotKit/CopilotKit\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/CopilotKit/CopilotKit.git\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"version\": \"1.10.6\",\n  \"sideEffects\": false,\n  \"main\": \"./dist/index.js\",\n  \"module\": \"./dist/index.mjs\",\n  \"exports\": {\n    \".\": {\n      \"import\": \"./dist/index.mjs\",\n      \"require\": \"./dist/index.js\",\n      \"types\": \"./dist/index.d.ts\"\n    }\n  },\n  \"types\": \"./dist/index.d.ts\",\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"build\": \"pnpm run graphql-codegen && tsup --clean\",\n    \"dev\": \"concurrently \\\"pnpm run graphql-codegen:watch\\\" \\\"tsup --watch --no-splitting\\\"\",\n    \"test\": \"vitest run\",\n    \"test:watch\": \"vitest\",\n    \"check-types\": \"tsc --noEmit\",\n    \"clean\": \"rm -rf .turbo && rm -rf node_modules && rm -rf ./src/graphql/@generated && rm -rf dist && rm -rf .next\",\n    \"graphql-codegen\": \"graphql-codegen -c codegen.ts\",\n    \"graphql-codegen:watch\": \"graphql-codegen -c codegen.ts --watch\",\n    \"link:global\": \"pnpm link --global\",\n    \"unlink:global\": \"pnpm unlink --global\"\n  },\n  \"peerDependencies\": {\n    \"react\": \"^18 || ^19 || ^19.0.0-rc\"\n  },\n  \"devDependencies\": {\n    \"@copilotkit/runtime\": \"workspace:*\",\n    \"@graphql-codegen/cli\": \"^5.0.2\",\n    \"@graphql-codegen/client-preset\": \"^4.2.6\",\n    \"@graphql-codegen/introspection\": \"^4.0.3\",\n    \"@graphql-codegen/typescript\": \"^4.0.7\",\n    \"@graphql-codegen/typescript-operations\": \"^4.2.1\",\n    \"@graphql-codegen/typescript-urql\": \"^4.0.0\",\n    \"@graphql-codegen/urql-introspection\": \"^3.0.0\",\n    \"@graphql-typed-document-node/core\": \"^3.2.0\",\n    \"@parcel/watcher\": \"^2.4.1\",\n    \"@types/node\": \"^20.12.12\",\n    \"concurrently\": \"^8.2.2\",\n    \"esbuild\": \"^0.23.0\",\n    \"graphql\": \"^16.8.1\",\n    \"jest\": \"^29.6.4\",\n    \"ts-jest\": \"^29.1.1\",\n    \"ts-node\": \"^10.9.2\",\n    \"tsup\": \"^6.7.0\",\n    \"typescript\": \"^5.4.5\",\n    \"vitest\": \"^3.1.3\"\n  },\n  \"dependencies\": {\n    \"@copilotkit/shared\": \"workspace:*\",\n    \"@urql/core\": \"^5.0.3\",\n    \"untruncate-json\": \"^0.0.1\",\n    \"urql\": \"^4.1.0\"\n  },\n  \"keywords\": [\n    \"copilotkit\",\n    \"copilot\",\n    \"react\",\n    \"nextjs\",\n    \"nodejs\",\n    \"ai\",\n    \"assistant\",\n    \"javascript\",\n    \"automation\",\n    \"textarea\"\n  ]\n}\n","/* eslint-disable */\nimport type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nexport type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };\nexport type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: { input: string; output: string; }\n  String: { input: string; output: string; }\n  Boolean: { input: boolean; output: boolean; }\n  Int: { input: number; output: number; }\n  Float: { input: number; output: number; }\n  /** A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format. */\n  DateTimeISO: { input: any; output: any; }\n  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */\n  JSON: { input: any; output: any; }\n  /** The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */\n  JSONObject: { input: any; output: any; }\n};\n\nexport type ActionExecutionMessageInput = {\n  arguments: Scalars['String']['input'];\n  name: Scalars['String']['input'];\n  parentMessageId?: InputMaybe<Scalars['String']['input']>;\n  /** @deprecated This field will be removed in a future version */\n  scope?: InputMaybe<Scalars['String']['input']>;\n};\n\nexport type ActionExecutionMessageOutput = BaseMessageOutput & {\n  __typename?: 'ActionExecutionMessageOutput';\n  arguments: Array<Scalars['String']['output']>;\n  createdAt: Scalars['DateTimeISO']['output'];\n  id: Scalars['String']['output'];\n  name: Scalars['String']['output'];\n  parentMessageId?: Maybe<Scalars['String']['output']>;\n  /** @deprecated This field will be removed in a future version */\n  scope?: Maybe<Scalars['String']['output']>;\n  status: MessageStatus;\n};\n\nexport type ActionInput = {\n  available?: InputMaybe<ActionInputAvailability>;\n  description: Scalars['String']['input'];\n  jsonSchema: Scalars['String']['input'];\n  name: Scalars['String']['input'];\n};\n\n/** The availability of the frontend action */\nexport enum ActionInputAvailability {\n  Disabled = 'disabled',\n  Enabled = 'enabled',\n  Remote = 'remote'\n}\n\nexport type Agent = {\n  __typename?: 'Agent';\n  description: Scalars['String']['output'];\n  id: Scalars['String']['output'];\n  name: Scalars['String']['output'];\n};\n\nexport type AgentSessionInput = {\n  agentName: Scalars['String']['input'];\n  nodeName?: InputMaybe<Scalars['String']['input']>;\n  threadId?: InputMaybe<Scalars['String']['input']>;\n};\n\nexport type AgentStateInput = {\n  agentName: Scalars['String']['input'];\n  config?: InputMaybe<Scalars['String']['input']>;\n  state: Scalars['String']['input'];\n};\n\nexport type AgentStateMessageInput = {\n  active: Scalars['Boolean']['input'];\n  agentName: Scalars['String']['input'];\n  nodeName: Scalars['String']['input'];\n  role: MessageRole;\n  runId: Scalars['String']['input'];\n  running: Scalars['Boolean']['input'];\n  state: Scalars['String']['input'];\n  threadId: Scalars['String']['input'];\n};\n\nexport type AgentStateMessageOutput = BaseMessageOutput & {\n  __typename?: 'AgentStateMessageOutput';\n  active: Scalars['Boolean']['output'];\n  agentName: Scalars['String']['output'];\n  createdAt: Scalars['DateTimeISO']['output'];\n  id: Scalars['String']['output'];\n  nodeName: Scalars['String']['output'];\n  role: MessageRole;\n  runId: Scalars['String']['output'];\n  running: Scalars['Boolean']['output'];\n  state: Scalars['String']['output'];\n  status: MessageStatus;\n  threadId: Scalars['String']['output'];\n};\n\nexport type AgentsResponse = {\n  __typename?: 'AgentsResponse';\n  agents: Array<Agent>;\n};\n\nexport type BaseMessageOutput = {\n  createdAt: Scalars['DateTimeISO']['output'];\n  id: Scalars['String']['output'];\n  status: MessageStatus;\n};\n\nexport type BaseMetaEvent = {\n  name: MetaEventName;\n  type: Scalars['String']['output'];\n};\n\nexport type BaseResponseStatus = {\n  code: ResponseStatusCode;\n};\n\nexport type CloudInput = {\n  guardrails?: InputMaybe<GuardrailsInput>;\n};\n\nexport type CopilotContextInput = {\n  description: Scalars['String']['input'];\n  value: Scalars['String']['input'];\n};\n\nexport type CopilotKitLangGraphInterruptEvent = BaseMetaEvent & {\n  __typename?: 'CopilotKitLangGraphInterruptEvent';\n  data: CopilotKitLangGraphInterruptEventData;\n  name: MetaEventName;\n  response?: Maybe<Scalars['String']['output']>;\n  type: Scalars['String']['output'];\n};\n\nexport type CopilotKitLangGraphInterruptEventData = {\n  __typename?: 'CopilotKitLangGraphInterruptEventData';\n  messages: Array<BaseMessageOutput>;\n  value: Scalars['String']['output'];\n};\n\n/** The type of Copilot request */\nexport enum CopilotRequestType {\n  Chat = 'Chat',\n  Suggestion = 'Suggestion',\n  Task = 'Task',\n  TextareaCompletion = 'TextareaCompletion',\n  TextareaPopover = 'TextareaPopover'\n}\n\nexport type CopilotResponse = {\n  __typename?: 'CopilotResponse';\n  extensions?: Maybe<ExtensionsResponse>;\n  messages: Array<BaseMessageOutput>;\n  metaEvents?: Maybe<Array<BaseMetaEvent>>;\n  runId?: Maybe<Scalars['String']['output']>;\n  status: ResponseStatus;\n  threadId: Scalars['String']['output'];\n};\n\nexport type ExtensionsInput = {\n  openaiAssistantAPI?: InputMaybe<OpenAiApiAssistantApiInput>;\n};\n\nexport type ExtensionsResponse = {\n  __typename?: 'ExtensionsResponse';\n  openaiAssistantAPI?: Maybe<OpenAiApiAssistantApiResponse>;\n};\n\nexport type FailedMessageStatus = {\n  __typename?: 'FailedMessageStatus';\n  code: MessageStatusCode;\n  reason: Scalars['String']['output'];\n};\n\nexport type FailedResponseStatus = BaseResponseStatus & {\n  __typename?: 'FailedResponseStatus';\n  code: ResponseStatusCode;\n  details?: Maybe<Scalars['JSON']['output']>;\n  reason: FailedResponseStatusReason;\n};\n\nexport enum FailedResponseStatusReason {\n  GuardrailsValidationFailed = 'GUARDRAILS_VALIDATION_FAILED',\n  MessageStreamInterrupted = 'MESSAGE_STREAM_INTERRUPTED',\n  UnknownError = 'UNKNOWN_ERROR'\n}\n\nexport type ForwardedParametersInput = {\n  maxTokens?: InputMaybe<Scalars['Float']['input']>;\n  model?: InputMaybe<Scalars['String']['input']>;\n  stop?: InputMaybe<Array<Scalars['String']['input']>>;\n  temperature?: InputMaybe<Scalars['Float']['input']>;\n  toolChoice?: InputMaybe<Scalars['String']['input']>;\n  toolChoiceFunctionName?: InputMaybe<Scalars['String']['input']>;\n};\n\nexport type FrontendInput = {\n  actions: Array<ActionInput>;\n  toDeprecate_fullContext?: InputMaybe<Scalars['String']['input']>;\n  url?: InputMaybe<Scalars['String']['input']>;\n};\n\nexport type GenerateCopilotResponseInput = {\n  agentSession?: InputMaybe<AgentSessionInput>;\n  agentState?: InputMaybe<AgentStateInput>;\n  agentStates?: InputMaybe<Array<AgentStateInput>>;\n  cloud?: InputMaybe<CloudInput>;\n  context?: InputMaybe<Array<CopilotContextInput>>;\n  extensions?: InputMaybe<ExtensionsInput>;\n  forwardedParameters?: InputMaybe<ForwardedParametersInput>;\n  frontend: FrontendInput;\n  messages: Array<MessageInput>;\n  metaEvents?: InputMaybe<Array<MetaEventInput>>;\n  metadata: GenerateCopilotResponseMetadataInput;\n  runId?: InputMaybe<Scalars['String']['input']>;\n  threadId?: InputMaybe<Scalars['String']['input']>;\n};\n\nexport type GenerateCopilotResponseMetadataInput = {\n  requestType?: InputMaybe<CopilotRequestType>;\n};\n\nexport type GuardrailsInput = {\n  inputValidationRules: GuardrailsRuleInput;\n};\n\nexport type GuardrailsRuleInput = {\n  allowList?: InputMaybe<Array<Scalars['String']['input']>>;\n  denyList?: InputMaybe<Array<Scalars['String']['input']>>;\n};\n\nexport type ImageMessageInput = {\n  bytes: Scalars['String']['input'];\n  format: Scalars['String']['input'];\n  parentMessageId?: InputMaybe<Scalars['String']['input']>;\n  role: MessageRole;\n};\n\nexport type ImageMessageOutput = BaseMessageOutput & {\n  __typename?: 'ImageMessageOutput';\n  bytes: Scalars['String']['output'];\n  createdAt: Scalars['DateTimeISO']['output'];\n  format: Scalars['String']['output'];\n  id: Scalars['String']['output'];\n  parentMessageId?: Maybe<Scalars['String']['output']>;\n  role: MessageRole;\n  status: MessageStatus;\n};\n\nexport type LangGraphInterruptEvent = BaseMetaEvent & {\n  __typename?: 'LangGraphInterruptEvent';\n  name: MetaEventName;\n  response?: Maybe<Scalars['String']['output']>;\n  type: Scalars['String']['output'];\n  value: Scalars['String']['output'];\n};\n\nexport type LoadAgentStateInput = {\n  agentName: Scalars['String']['input'];\n  threadId: Scalars['String']['input'];\n};\n\nexport type LoadAgentStateResponse = {\n  __typename?: 'LoadAgentStateResponse';\n  messages: Scalars['String']['output'];\n  state: Scalars['String']['output'];\n  threadExists: Scalars['Boolean']['output'];\n  threadId: Scalars['String']['output'];\n};\n\nexport type MessageInput = {\n  actionExecutionMessage?: InputMaybe<ActionExecutionMessageInput>;\n  agentStateMessage?: InputMaybe<AgentStateMessageInput>;\n  createdAt: Scalars['DateTimeISO']['input'];\n  id: Scalars['String']['input'];\n  imageMessage?: InputMaybe<ImageMessageInput>;\n  resultMessage?: InputMaybe<ResultMessageInput>;\n  textMessage?: InputMaybe<TextMessageInput>;\n};\n\n/** The role of the message */\nexport enum MessageRole {\n  Assistant = 'assistant',\n  Developer = 'developer',\n  System = 'system',\n  Tool = 'tool',\n  User = 'user'\n}\n\nexport type MessageStatus = FailedMessageStatus | PendingMessageStatus | SuccessMessageStatus;\n\nexport enum MessageStatusCode {\n  Failed = 'Failed',\n  Pending = 'Pending',\n  Success = 'Success'\n}\n\nexport type MetaEventInput = {\n  messages?: InputMaybe<Array<MessageInput>>;\n  name: MetaEventName;\n  response?: InputMaybe<Scalars['String']['input']>;\n  value: Scalars['String']['input'];\n};\n\n/** Meta event types */\nexport enum MetaEventName {\n  CopilotKitLangGraphInterruptEvent = 'CopilotKitLangGraphInterruptEvent',\n  LangGraphInterruptEvent = 'LangGraphInterruptEvent'\n}\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  generateCopilotResponse: CopilotResponse;\n};\n\n\nexport type MutationGenerateCopilotResponseArgs = {\n  data: GenerateCopilotResponseInput;\n  properties?: InputMaybe<Scalars['JSONObject']['input']>;\n};\n\nexport type OpenAiApiAssistantApiInput = {\n  runId?: InputMaybe<Scalars['String']['input']>;\n  threadId?: InputMaybe<Scalars['String']['input']>;\n};\n\nexport type OpenAiApiAssistantApiResponse = {\n  __typename?: 'OpenAIApiAssistantAPIResponse';\n  runId?: Maybe<Scalars['String']['output']>;\n  threadId?: Maybe<Scalars['String']['output']>;\n};\n\nexport type PendingMessageStatus = {\n  __typename?: 'PendingMessageStatus';\n  code: MessageStatusCode;\n};\n\nexport type PendingResponseStatus = BaseResponseStatus & {\n  __typename?: 'PendingResponseStatus';\n  code: ResponseStatusCode;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  availableAgents: AgentsResponse;\n  hello: Scalars['String']['output'];\n  loadAgentState: LoadAgentStateResponse;\n};\n\n\nexport type QueryLoadAgentStateArgs = {\n  data: LoadAgentStateInput;\n};\n\nexport type ResponseStatus = FailedResponseStatus | PendingResponseStatus | SuccessResponseStatus;\n\nexport enum ResponseStatusCode {\n  Failed = 'Failed',\n  Pending = 'Pending',\n  Success = 'Success'\n}\n\nexport type ResultMessageInput = {\n  actionExecutionId: Scalars['String']['input'];\n  actionName: Scalars['String']['input'];\n  parentMessageId?: InputMaybe<Scalars['String']['input']>;\n  result: Scalars['String']['input'];\n};\n\nexport type ResultMessageOutput = BaseMessageOutput & {\n  __typename?: 'ResultMessageOutput';\n  actionExecutionId: Scalars['String']['output'];\n  actionName: Scalars['String']['output'];\n  createdAt: Scalars['DateTimeISO']['output'];\n  id: Scalars['String']['output'];\n  result: Scalars['String']['output'];\n  status: MessageStatus;\n};\n\nexport type SuccessMessageStatus = {\n  __typename?: 'SuccessMessageStatus';\n  code: MessageStatusCode;\n};\n\nexport type SuccessResponseStatus = BaseResponseStatus & {\n  __typename?: 'SuccessResponseStatus';\n  code: ResponseStatusCode;\n};\n\nexport type TextMessageInput = {\n  content: Scalars['String']['input'];\n  parentMessageId?: InputMaybe<Scalars['String']['input']>;\n  role: MessageRole;\n};\n\nexport type TextMessageOutput = BaseMessageOutput & {\n  __typename?: 'TextMessageOutput';\n  content: Array<Scalars['String']['output']>;\n  createdAt: Scalars['DateTimeISO']['output'];\n  id: Scalars['String']['output'];\n  parentMessageId?: Maybe<Scalars['String']['output']>;\n  role: MessageRole;\n  status: MessageStatus;\n};\n\nexport type GenerateCopilotResponseMutationVariables = Exact<{\n  data: GenerateCopilotResponseInput;\n  properties?: InputMaybe<Scalars['JSONObject']['input']>;\n}>;\n\n\nexport type GenerateCopilotResponseMutation = { __typename?: 'Mutation', generateCopilotResponse: { __typename?: 'CopilotResponse', threadId: string, runId?: string | null, extensions?: { __typename?: 'ExtensionsResponse', openaiAssistantAPI?: { __typename?: 'OpenAIApiAssistantAPIResponse', runId?: string | null, threadId?: string | null } | null } | null, messages: Array<{ __typename: 'ActionExecutionMessageOutput', id: string, createdAt: any, name: string, arguments: Array<string>, parentMessageId?: string | null, status: { __typename?: 'FailedMessageStatus', code: MessageStatusCode, reason: string } | { __typename?: 'PendingMessageStatus', code: MessageStatusCode } | { __typename?: 'SuccessMessageStatus', code: MessageStatusCode } } | { __typename: 'AgentStateMessageOutput', id: string, createdAt: any, threadId: string, state: string, running: boolean, agentName: string, nodeName: string, runId: string, active: boolean, role: MessageRole, status: { __typename?: 'FailedMessageStatus', code: MessageStatusCode, reason: string } | { __typename?: 'PendingMessageStatus', code: MessageStatusCode } | { __typename?: 'SuccessMessageStatus', code: MessageStatusCode } } | { __typename: 'ImageMessageOutput', id: string, createdAt: any, format: string, bytes: string, role: MessageRole, parentMessageId?: string | null, status: { __typename?: 'FailedMessageStatus', code: MessageStatusCode, reason: string } | { __typename?: 'PendingMessageStatus', code: MessageStatusCode } | { __typename?: 'SuccessMessageStatus', code: MessageStatusCode } } | { __typename: 'ResultMessageOutput', id: string, createdAt: any, result: string, actionExecutionId: string, actionName: string, status: { __typename?: 'FailedMessageStatus', code: MessageStatusCode, reason: string } | { __typename?: 'PendingMessageStatus', code: MessageStatusCode } | { __typename?: 'SuccessMessageStatus', code: MessageStatusCode } } | { __typename: 'TextMessageOutput', id: string, createdAt: any, content: Array<string>, role: MessageRole, parentMessageId?: string | null, status: { __typename?: 'FailedMessageStatus', code: MessageStatusCode, reason: string } | { __typename?: 'PendingMessageStatus', code: MessageStatusCode } | { __typename?: 'SuccessMessageStatus', code: MessageStatusCode } }>, metaEvents?: Array<{ __typename?: 'CopilotKitLangGraphInterruptEvent', type: string, name: MetaEventName, data: { __typename?: 'CopilotKitLangGraphInterruptEventData', value: string, messages: Array<{ __typename: 'ActionExecutionMessageOutput', id: string, createdAt: any, name: string, arguments: Array<string>, parentMessageId?: string | null, status: { __typename?: 'FailedMessageStatus', code: MessageStatusCode, reason: string } | { __typename?: 'PendingMessageStatus', code: MessageStatusCode } | { __typename?: 'SuccessMessageStatus', code: MessageStatusCode } } | { __typename: 'AgentStateMessageOutput', id: string, createdAt: any, status: { __typename?: 'FailedMessageStatus', code: MessageStatusCode, reason: string } | { __typename?: 'PendingMessageStatus', code: MessageStatusCode } | { __typename?: 'SuccessMessageStatus', code: MessageStatusCode } } | { __typename: 'ImageMessageOutput', id: string, createdAt: any, status: { __typename?: 'FailedMessageStatus', code: MessageStatusCode, reason: string } | { __typename?: 'PendingMessageStatus', code: MessageStatusCode } | { __typename?: 'SuccessMessageStatus', code: MessageStatusCode } } | { __typename: 'ResultMessageOutput', id: string, createdAt: any, result: string, actionExecutionId: string, actionName: string, status: { __typename?: 'FailedMessageStatus', code: MessageStatusCode, reason: string } | { __typename?: 'PendingMessageStatus', code: MessageStatusCode } | { __typename?: 'SuccessMessageStatus', code: MessageStatusCode } } | { __typename: 'TextMessageOutput', id: string, createdAt: any, content: Array<string>, role: MessageRole, parentMessageId?: string | null, status: { __typename?: 'FailedMessageStatus', code: MessageStatusCode, reason: string } | { __typename?: 'PendingMessageStatus', code: MessageStatusCode } | { __typename?: 'SuccessMessageStatus', code: MessageStatusCode } }> } } | { __typename?: 'LangGraphInterruptEvent', type: string, name: MetaEventName, value: string }> | null } & ({ __typename?: 'CopilotResponse', status: { __typename?: 'FailedResponseStatus', code: ResponseStatusCode, reason: FailedResponseStatusReason, details?: any | null } | { __typename?: 'PendingResponseStatus', code: ResponseStatusCode } | { __typename?: 'SuccessResponseStatus', code: ResponseStatusCode } } | { __typename?: 'CopilotResponse', status?: never }) };\n\nexport type AvailableAgentsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type AvailableAgentsQuery = { __typename?: 'Query', availableAgents: { __typename?: 'AgentsResponse', agents: Array<{ __typename?: 'Agent', name: string, id: string, description: string }> } };\n\nexport type LoadAgentStateQueryVariables = Exact<{\n  data: LoadAgentStateInput;\n}>;\n\n\nexport type LoadAgentStateQuery = { __typename?: 'Query', loadAgentState: { __typename?: 'LoadAgentStateResponse', threadId: string, threadExists: boolean, state: string, messages: string } };\n\n\nexport const GenerateCopilotResponseDocument = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"mutation\",\"name\":{\"kind\":\"Name\",\"value\":\"generateCopilotResponse\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"data\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"GenerateCopilotResponseInput\"}}}},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"properties\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"JSONObject\"}}}],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"generateCopilotResponse\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"data\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"data\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"properties\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"properties\"}}}],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"threadId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"runId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"extensions\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"openaiAssistantAPI\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"runId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"threadId\"}}]}}]}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"CopilotResponse\"}},\"directives\":[{\"kind\":\"Directive\",\"name\":{\"kind\":\"Name\",\"value\":\"defer\"}}],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"status\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"BaseResponseStatus\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"code\"}}]}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"FailedResponseStatus\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"reason\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"details\"}}]}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"messages\"},\"directives\":[{\"kind\":\"Directive\",\"name\":{\"kind\":\"Name\",\"value\":\"stream\"}}],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"BaseMessageOutput\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"createdAt\"}}]}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"BaseMessageOutput\"}},\"directives\":[{\"kind\":\"Directive\",\"name\":{\"kind\":\"Name\",\"value\":\"defer\"}}],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"status\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SuccessMessageStatus\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"code\"}}]}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"FailedMessageStatus\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"code\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"reason\"}}]}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"PendingMessageStatus\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"code\"}}]}}]}}]}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"TextMessageOutput\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"content\"},\"directives\":[{\"kind\":\"Directive\",\"name\":{\"kind\":\"Name\",\"value\":\"stream\"}}]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"role\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"parentMessageId\"}}]}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ImageMessageOutput\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"format\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"bytes\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"role\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"parentMessageId\"}}]}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ActionExecutionMessageOutput\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"arguments\"},\"directives\":[{\"kind\":\"Directive\",\"name\":{\"kind\":\"Name\",\"value\":\"stream\"}}]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"parentMessageId\"}}]}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ResultMessageOutput\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"result\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"actionExecutionId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"actionName\"}}]}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"AgentStateMessageOutput\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"threadId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"state\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"running\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"agentName\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"nodeName\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"runId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"active\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"role\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"metaEvents\"},\"directives\":[{\"kind\":\"Directive\",\"name\":{\"kind\":\"Name\",\"value\":\"stream\"}}],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"LangGraphInterruptEvent\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"type\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"value\"}}]}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"CopilotKitLangGraphInterruptEvent\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"type\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"data\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"messages\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"BaseMessageOutput\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"createdAt\"}}]}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"BaseMessageOutput\"}},\"directives\":[{\"kind\":\"Directive\",\"name\":{\"kind\":\"Name\",\"value\":\"defer\"}}],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"status\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SuccessMessageStatus\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"code\"}}]}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"FailedMessageStatus\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"code\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"reason\"}}]}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"PendingMessageStatus\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"code\"}}]}}]}}]}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"TextMessageOutput\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"content\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"role\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"parentMessageId\"}}]}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ActionExecutionMessageOutput\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"arguments\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"parentMessageId\"}}]}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ResultMessageOutput\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"result\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"actionExecutionId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"actionName\"}}]}}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"value\"}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<GenerateCopilotResponseMutation, GenerateCopilotResponseMutationVariables>;\nexport const AvailableAgentsDocument = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"availableAgents\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"availableAgents\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"agents\"},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"description\"}}]}}]}}]}}]} as unknown as DocumentNode<AvailableAgentsQuery, AvailableAgentsQueryVariables>;\nexport const LoadAgentStateDocument = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"loadAgentState\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"data\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"LoadAgentStateInput\"}}}}],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"loadAgentState\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"data\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"data\"}}}],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"threadId\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"threadExists\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"state\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"messages\"}}]}}]}}]} as unknown as DocumentNode<LoadAgentStateQuery, LoadAgentStateQueryVariables>;","/* eslint-disable */\nimport * as types from './graphql';\nimport type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';\n\n/**\n * Map of all GraphQL operations in the project.\n *\n * This map has several performance disadvantages:\n * 1. It is not tree-shakeable, so it will include all operations in the project.\n * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.\n * 3. It does not support dead code elimination, so it will add unused operations.\n *\n * Therefore it is highly recommended to use the babel or swc plugin for production.\n */\nconst documents = {\n    \"\\n  mutation generateCopilotResponse($data: GenerateCopilotResponseInput!, $properties: JSONObject) {\\n    generateCopilotResponse(data: $data, properties: $properties) {\\n      threadId\\n      runId\\n      extensions {\\n        openaiAssistantAPI {\\n          runId\\n          threadId\\n        }\\n      }\\n      ... on CopilotResponse @defer {\\n        status {\\n          ... on BaseResponseStatus {\\n            code\\n          }\\n          ... on FailedResponseStatus {\\n            reason\\n            details\\n          }\\n        }\\n      }\\n      messages @stream {\\n        __typename\\n        ... on BaseMessageOutput {\\n          id\\n          createdAt\\n        }\\n        ... on BaseMessageOutput @defer {\\n          status {\\n            ... on SuccessMessageStatus {\\n              code\\n            }\\n            ... on FailedMessageStatus {\\n              code\\n              reason\\n            }\\n            ... on PendingMessageStatus {\\n              code\\n            }\\n          }\\n        }\\n        ... on TextMessageOutput {\\n          content @stream\\n          role\\n          parentMessageId\\n        }\\n        ... on ImageMessageOutput {\\n          format\\n          bytes\\n          role\\n          parentMessageId\\n        }\\n        ... on ActionExecutionMessageOutput {\\n          name\\n          arguments @stream\\n          parentMessageId\\n        }\\n        ... on ResultMessageOutput {\\n          result\\n          actionExecutionId\\n          actionName\\n        }\\n        ... on AgentStateMessageOutput {\\n          threadId\\n          state\\n          running\\n          agentName\\n          nodeName\\n          runId\\n          active\\n          role\\n        }\\n      }\\n      metaEvents @stream {\\n        ... on LangGraphInterruptEvent {\\n          type\\n          name\\n          value\\n        }\\n\\n        ... on CopilotKitLangGraphInterruptEvent {\\n          type\\n          name\\n          data {\\n            messages {\\n              __typename\\n              ... on BaseMessageOutput {\\n                id\\n                createdAt\\n              }\\n              ... on BaseMessageOutput @defer {\\n                status {\\n                  ... on SuccessMessageStatus {\\n                    code\\n                  }\\n                  ... on FailedMessageStatus {\\n                    code\\n                    reason\\n                  }\\n                  ... on PendingMessageStatus {\\n                    code\\n                  }\\n                }\\n              }\\n              ... on TextMessageOutput {\\n                content\\n                role\\n                parentMessageId\\n              }\\n              ... on ActionExecutionMessageOutput {\\n                name\\n                arguments\\n                parentMessageId\\n              }\\n              ... on ResultMessageOutput {\\n                result\\n                actionExecutionId\\n                actionName\\n              }\\n            }\\n            value\\n          }\\n        }\\n      }\\n    }\\n  }\\n\": types.GenerateCopilotResponseDocument,\n    \"\\n  query availableAgents {\\n    availableAgents {\\n      agents {\\n        name\\n        id\\n        description\\n      }\\n    }\\n  }\\n\": types.AvailableAgentsDocument,\n    \"\\n  query loadAgentState($data: LoadAgentStateInput!) {\\n    loadAgentState(data: $data) {\\n      threadId\\n      threadExists\\n      state\\n      messages\\n    }\\n  }\\n\": types.LoadAgentStateDocument,\n};\n\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n *\n *\n * @example\n * ```ts\n * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);\n * ```\n *\n * The query argument is unknown!\n * Please regenerate the types.\n */\nexport function graphql(source: string): unknown;\n\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function graphql(source: \"\\n  mutation generateCopilotResponse($data: GenerateCopilotResponseInput!, $properties: JSONObject) {\\n    generateCopilotResponse(data: $data, properties: $properties) {\\n      threadId\\n      runId\\n      extensions {\\n        openaiAssistantAPI {\\n          runId\\n          threadId\\n        }\\n      }\\n      ... on CopilotResponse @defer {\\n        status {\\n          ... on BaseResponseStatus {\\n            code\\n          }\\n          ... on FailedResponseStatus {\\n            reason\\n            details\\n          }\\n        }\\n      }\\n      messages @stream {\\n        __typename\\n        ... on BaseMessageOutput {\\n          id\\n          createdAt\\n        }\\n        ... on BaseMessageOutput @defer {\\n          status {\\n            ... on SuccessMessageStatus {\\n              code\\n            }\\n            ... on FailedMessageStatus {\\n              code\\n              reason\\n            }\\n            ... on PendingMessageStatus {\\n              code\\n            }\\n          }\\n        }\\n        ... on TextMessageOutput {\\n          content @stream\\n          role\\n          parentMessageId\\n        }\\n        ... on ImageMessageOutput {\\n          format\\n          bytes\\n          role\\n          parentMessageId\\n        }\\n        ... on ActionExecutionMessageOutput {\\n          name\\n          arguments @stream\\n          parentMessageId\\n        }\\n        ... on ResultMessageOutput {\\n          result\\n          actionExecutionId\\n          actionName\\n        }\\n        ... on AgentStateMessageOutput {\\n          threadId\\n          state\\n          running\\n          agentName\\n          nodeName\\n          runId\\n          active\\n          role\\n        }\\n      }\\n      metaEvents @stream {\\n        ... on LangGraphInterruptEvent {\\n          type\\n          name\\n          value\\n        }\\n\\n        ... on CopilotKitLangGraphInterruptEvent {\\n          type\\n          name\\n          data {\\n            messages {\\n              __typename\\n              ... on BaseMessageOutput {\\n                id\\n                createdAt\\n              }\\n              ... on BaseMessageOutput @defer {\\n                status {\\n                  ... on SuccessMessageStatus {\\n                    code\\n                  }\\n                  ... on FailedMessageStatus {\\n                    code\\n                    reason\\n                  }\\n                  ... on PendingMessageStatus {\\n                    code\\n                  }\\n                }\\n              }\\n              ... on TextMessageOutput {\\n                content\\n                role\\n                parentMessageId\\n              }\\n              ... on ActionExecutionMessageOutput {\\n                name\\n                arguments\\n                parentMessageId\\n              }\\n              ... on ResultMessageOutput {\\n                result\\n                actionExecutionId\\n                actionName\\n              }\\n            }\\n            value\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"): (typeof documents)[\"\\n  mutation generateCopilotResponse($data: GenerateCopilotResponseInput!, $properties: JSONObject) {\\n    generateCopilotResponse(data: $data, properties: $properties) {\\n      threadId\\n      runId\\n      extensions {\\n        openaiAssistantAPI {\\n          runId\\n          threadId\\n        }\\n      }\\n      ... on CopilotResponse @defer {\\n        status {\\n          ... on BaseResponseStatus {\\n            code\\n          }\\n          ... on FailedResponseStatus {\\n            reason\\n            details\\n          }\\n        }\\n      }\\n      messages @stream {\\n        __typename\\n        ... on BaseMessageOutput {\\n          id\\n          createdAt\\n        }\\n        ... on BaseMessageOutput @defer {\\n          status {\\n            ... on SuccessMessageStatus {\\n              code\\n            }\\n            ... on FailedMessageStatus {\\n              code\\n              reason\\n            }\\n            ... on PendingMessageStatus {\\n              code\\n            }\\n          }\\n        }\\n        ... on TextMessageOutput {\\n          content @stream\\n          role\\n          parentMessageId\\n        }\\n        ... on ImageMessageOutput {\\n          format\\n          bytes\\n          role\\n          parentMessageId\\n        }\\n        ... on ActionExecutionMessageOutput {\\n          name\\n          arguments @stream\\n          parentMessageId\\n        }\\n        ... on ResultMessageOutput {\\n          result\\n          actionExecutionId\\n          actionName\\n        }\\n        ... on AgentStateMessageOutput {\\n          threadId\\n          state\\n          running\\n          agentName\\n          nodeName\\n          runId\\n          active\\n          role\\n        }\\n      }\\n      metaEvents @stream {\\n        ... on LangGraphInterruptEvent {\\n          type\\n          name\\n          value\\n        }\\n\\n        ... on CopilotKitLangGraphInterruptEvent {\\n          type\\n          name\\n          data {\\n            messages {\\n              __typename\\n              ... on BaseMessageOutput {\\n                id\\n                createdAt\\n              }\\n              ... on BaseMessageOutput @defer {\\n                status {\\n                  ... on SuccessMessageStatus {\\n                    code\\n                  }\\n                  ... on FailedMessageStatus {\\n                    code\\n                    reason\\n                  }\\n                  ... on PendingMessageStatus {\\n                    code\\n                  }\\n                }\\n              }\\n              ... on TextMessageOutput {\\n                content\\n                role\\n                parentMessageId\\n              }\\n              ... on ActionExecutionMessageOutput {\\n                name\\n                arguments\\n                parentMessageId\\n              }\\n              ... on ResultMessageOutput {\\n                result\\n                actionExecutionId\\n                actionName\\n              }\\n            }\\n            value\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"];\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function graphql(source: \"\\n  query availableAgents {\\n    availableAgents {\\n      agents {\\n        name\\n        id\\n        description\\n      }\\n    }\\n  }\\n\"): (typeof documents)[\"\\n  query availableAgents {\\n    availableAgents {\\n      agents {\\n        name\\n        id\\n        description\\n      }\\n    }\\n  }\\n\"];\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function graphql(source: \"\\n  query loadAgentState($data: LoadAgentStateInput!) {\\n    loadAgentState(data: $data) {\\n      threadId\\n      threadExists\\n      state\\n      messages\\n    }\\n  }\\n\"): (typeof documents)[\"\\n  query loadAgentState($data: LoadAgentStateInput!) {\\n    loadAgentState(data: $data) {\\n      threadId\\n      threadExists\\n      state\\n      messages\\n    }\\n  }\\n\"];\n\nexport function graphql(source: string) {\n  return (documents as any)[source] ?? {};\n}\n\nexport type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;","import { graphql } from \"../@generated/gql\";\n\nexport const generateCopilotResponseMutation = graphql(/** GraphQL **/ `\n  mutation generateCopilotResponse($data: GenerateCopilotResponseInput!, $properties: JSONObject) {\n    generateCopilotResponse(data: $data, properties: $properties) {\n      threadId\n      runId\n      extensions {\n        openaiAssistantAPI {\n          runId\n          threadId\n        }\n      }\n      ... on CopilotResponse @defer {\n        status {\n          ... on BaseResponseStatus {\n            code\n          }\n          ... on FailedResponseStatus {\n            reason\n            details\n          }\n        }\n      }\n      messages @stream {\n        __typename\n        ... on BaseMessageOutput {\n          id\n          createdAt\n        }\n        ... on BaseMessageOutput @defer {\n          status {\n            ... on SuccessMessageStatus {\n              code\n            }\n            ... on FailedMessageStatus {\n              code\n              reason\n            }\n            ... on PendingMessageStatus {\n              code\n            }\n          }\n        }\n        ... on TextMessageOutput {\n          content @stream\n          role\n          parentMessageId\n        }\n        ... on ImageMessageOutput {\n          format\n          bytes\n          role\n          parentMessageId\n        }\n        ... on ActionExecutionMessageOutput {\n          name\n          arguments @stream\n          parentMessageId\n        }\n        ... on ResultMessageOutput {\n          result\n          actionExecutionId\n          actionName\n        }\n        ... on AgentStateMessageOutput {\n          threadId\n          state\n          running\n          agentName\n          nodeName\n          runId\n          active\n          role\n        }\n      }\n      metaEvents @stream {\n        ... on LangGraphInterruptEvent {\n          type\n          name\n          value\n        }\n\n        ... on CopilotKitLangGraphInterruptEvent {\n          type\n          name\n          data {\n            messages {\n              __typename\n              ... on BaseMessageOutput {\n                id\n                createdAt\n              }\n              ... on BaseMessageOutput @defer {\n                status {\n                  ... on SuccessMessageStatus {\n                    code\n                  }\n                  ... on FailedMessageStatus {\n                    code\n                    reason\n                  }\n                  ... on PendingMessageStatus {\n                    code\n                  }\n                }\n              }\n              ... on TextMessageOutput {\n                content\n                role\n                parentMessageId\n              }\n              ... on ActionExecutionMessageOutput {\n                name\n                arguments\n                parentMessageId\n              }\n              ... on ResultMessageOutput {\n                result\n                actionExecutionId\n                actionName\n              }\n            }\n            value\n          }\n        }\n      }\n    }\n  }\n`);\n","import { graphql } from \"../@generated/gql\";\n\nexport const getAvailableAgentsQuery = graphql(/** GraphQL **/ `\n  query availableAgents {\n    availableAgents {\n      agents {\n        name\n        id\n        description\n      }\n    }\n  }\n`);\n\nexport const loadAgentStateQuery = graphql(/** GraphQL **/ `\n  query loadAgentState($data: LoadAgentStateInput!) {\n    loadAgentState(data: $data) {\n      threadId\n      threadExists\n      state\n      messages\n    }\n  }\n`);\n","import { randomId } from \"@copilotkit/shared\";\nimport {\n  ActionExecutionMessageInput,\n  MessageRole,\n  MessageStatus,\n  ResultMessageInput,\n  TextMessageInput,\n  BaseMessageOutput,\n  AgentStateMessageInput,\n  MessageStatusCode,\n  LangGraphInterruptEvent as GqlLangGraphInterruptEvent,\n  MetaEventName,\n  CopilotKitLangGraphInterruptEvent as GqlCopilotKitLangGraphInterruptEvent,\n  ImageMessageInput,\n} from \"../graphql/@generated/graphql\";\nimport { parseJson } from \"@copilotkit/shared\";\n\ntype MessageType =\n  | \"TextMessage\"\n  | \"ActionExecutionMessage\"\n  | \"ResultMessage\"\n  | \"AgentStateMessage\"\n  | \"ImageMessage\";\n\nexport class Message {\n  type: MessageType;\n  id: BaseMessageOutput[\"id\"];\n  createdAt: BaseMessageOutput[\"createdAt\"];\n  status: MessageStatus;\n\n  constructor(props: any) {\n    props.id ??= randomId();\n    props.status ??= { code: MessageStatusCode.Success };\n    props.createdAt ??= new Date();\n    Object.assign(this, props);\n  }\n\n  isTextMessage(): this is TextMessage {\n    return this.type === \"TextMessage\";\n  }\n\n  isActionExecutionMessage(): this is ActionExecutionMessage {\n    return this.type === \"ActionExecutionMessage\";\n  }\n\n  isResultMessage(): this is ResultMessage {\n    return this.type === \"ResultMessage\";\n  }\n\n  isAgentStateMessage(): this is AgentStateMessage {\n    return this.type === \"AgentStateMessage\";\n  }\n\n  isImageMessage(): this is ImageMessage {\n    return this.type === \"ImageMessage\";\n  }\n}\n\n// alias Role to MessageRole\nexport const Role = MessageRole;\n\n// when constructing any message, the base fields are optional\ntype MessageConstructorOptions = Partial<Message>;\n\ntype TextMessageConstructorOptions = MessageConstructorOptions & TextMessageInput;\n\nexport class TextMessage extends Message implements TextMessageConstructorOptions {\n  role: TextMessageInput[\"role\"];\n  content: TextMessageInput[\"content\"];\n  parentMessageId: TextMessageInput[\"parentMessageId\"];\n\n  constructor(props: TextMessageConstructorOptions) {\n    super(props);\n    this.type = \"TextMessage\";\n  }\n}\n\ntype ActionExecutionMessageConstructorOptions = MessageConstructorOptions &\n  Omit<ActionExecutionMessageInput, \"arguments\"> & {\n    arguments: Record<string, any>;\n  };\n\nexport class ActionExecutionMessage\n  extends Message\n  implements Omit<ActionExecutionMessageInput, \"arguments\" | \"scope\">\n{\n  name: ActionExecutionMessageInput[\"name\"];\n  arguments: Record<string, any>;\n  parentMessageId: ActionExecutionMessageInput[\"parentMessageId\"];\n  constructor(props: ActionExecutionMessageConstructorOptions) {\n    super(props);\n    this.type = \"ActionExecutionMessage\";\n  }\n}\n\ntype ResultMessageConstructorOptions = MessageConstructorOptions & ResultMessageInput;\n\nexport class ResultMessage extends Message implements ResultMessageConstructorOptions {\n  actionExecutionId: ResultMessageInput[\"actionExecutionId\"];\n  actionName: ResultMessageInput[\"actionName\"];\n  result: ResultMessageInput[\"result\"];\n\n  constructor(props: ResultMessageConstructorOptions) {\n    super(props);\n    this.type = \"ResultMessage\";\n  }\n\n  static decodeResult(result: string): any {\n    return parseJson(result, result);\n  }\n\n  static encodeResult(result: any): string {\n    if (result === undefined) {\n      return \"\";\n    } else if (typeof result === \"string\") {\n      return result;\n    } else {\n      return JSON.stringify(result);\n    }\n  }\n}\n\nexport class AgentStateMessage extends Message implements Omit<AgentStateMessageInput, \"state\"> {\n  agentName: AgentStateMessageInput[\"agentName\"];\n  state: any;\n  running: AgentStateMessageInput[\"running\"];\n  threadId: AgentStateMessageInput[\"threadId\"];\n  role: AgentStateMessageInput[\"role\"];\n  nodeName: AgentStateMessageInput[\"nodeName\"];\n  runId: AgentStateMessageInput[\"runId\"];\n  active: AgentStateMessageInput[\"active\"];\n\n  constructor(props: any) {\n    super(props);\n    this.type = \"AgentStateMessage\";\n  }\n}\n\ntype ImageMessageConstructorOptions = MessageConstructorOptions & ImageMessageInput;\n\nexport class ImageMessage extends Message implements ImageMessageConstructorOptions {\n  format: ImageMessageInput[\"format\"];\n  bytes: ImageMessageInput[\"bytes\"];\n  role: ImageMessageInput[\"role\"];\n  parentMessageId: ImageMessageInput[\"parentMessageId\"];\n\n  constructor(props: ImageMessageConstructorOptions) {\n    super(props);\n    this.type = \"ImageMessage\";\n  }\n}\n\nexport function langGraphInterruptEvent(\n  eventProps: Omit<LangGraphInterruptEvent, \"name\" | \"type\" | \"__typename\">,\n): LangGraphInterruptEvent {\n  return { ...eventProps, name: MetaEventName.LangGraphInterruptEvent, type: \"MetaEvent\" };\n}\n\nexport type LangGraphInterruptEvent<TValue extends any = any> = GqlLangGraphInterruptEvent & {\n  value: TValue;\n};\n\ntype CopilotKitLangGraphInterruptEvent<TValue extends any = any> =\n  GqlCopilotKitLangGraphInterruptEvent & {\n    data: GqlCopilotKitLangGraphInterruptEvent[\"data\"] & { value: TValue };\n  };\n\nexport type MetaEvent = LangGraphInterruptEvent | CopilotKitLangGraphInterruptEvent;\n","import {\n  GenerateCopilotResponseMutation,\n  MessageInput,\n  MessageStatusCode,\n} from \"../graphql/@generated/graphql\";\nimport {\n  ActionExecutionMessage,\n  AgentStateMessage,\n  Message,\n  ResultMessage,\n  TextMessage,\n  ImageMessage,\n} from \"./types\";\n\nimport untruncateJson from \"untruncate-json\";\nimport { parseJson } from \"@copilotkit/shared\";\n\nexport function filterAgentStateMessages(messages: Message[]): Message[] {\n  return messages.filter((message) => !message.isAgentStateMessage());\n}\n\nexport function convertMessagesToGqlInput(messages: Message[]): MessageInput[] {\n  return messages.map((message) => {\n    if (message.isTextMessage()) {\n      return {\n        id: message.id,\n        createdAt: message.createdAt,\n        textMessage: {\n          content: message.content,\n          role: message.role as any,\n          parentMessageId: message.parentMessageId,\n        },\n      };\n    } else if (message.isActionExecutionMessage()) {\n      return {\n        id: message.id,\n        createdAt: message.createdAt,\n        actionExecutionMessage: {\n          name: message.name,\n          arguments: JSON.stringify(message.arguments),\n          parentMessageId: message.parentMessageId,\n        },\n      };\n    } else if (message.isResultMessage()) {\n      return {\n        id: message.id,\n        createdAt: message.createdAt,\n        resultMessage: {\n          result: message.result,\n          actionExecutionId: message.actionExecutionId,\n          actionName: message.actionName,\n        },\n      };\n    } else if (message.isAgentStateMessage()) {\n      return {\n        id: message.id,\n        createdAt: message.createdAt,\n        agentStateMessage: {\n          threadId: message.threadId,\n          role: message.role,\n          agentName: message.agentName,\n          nodeName: message.nodeName,\n          runId: message.runId,\n          active: message.active,\n          running: message.running,\n          state: JSON.stringify(message.state),\n        },\n      };\n    } else if (message.isImageMessage()) {\n      return {\n        id: message.id,\n        createdAt: message.createdAt,\n        imageMessage: {\n          format: message.format,\n          bytes: message.bytes,\n          role: message.role as any,\n          parentMessageId: message.parentMessageId,\n        },\n      };\n    } else {\n      throw new Error(\"Unknown message type\");\n    }\n  });\n}\n\nexport function filterAdjacentAgentStateMessages(\n  messages: GenerateCopilotResponseMutation[\"generateCopilotResponse\"][\"messages\"],\n): GenerateCopilotResponseMutation[\"generateCopilotResponse\"][\"messages\"] {\n  const filteredMessages: GenerateCopilotResponseMutation[\"generateCopilotResponse\"][\"messages\"] =\n    [];\n\n  messages.forEach((message, i) => {\n    // keep all other message types\n    if (message.__typename !== \"AgentStateMessageOutput\") {\n      filteredMessages.push(message);\n    } else {\n      const prevAgentStateMessageIndex = filteredMessages.findIndex(\n        // TODO: also check runId\n        (m) => m.__typename === \"AgentStateMessageOutput\" && m.agentName === message.agentName,\n      );\n      if (prevAgentStateMessageIndex === -1) {\n        filteredMessages.push(message);\n      } else {\n        filteredMessages[prevAgentStateMessageIndex] = message;\n      }\n    }\n  });\n\n  return filteredMessages;\n}\n\nexport function convertGqlOutputToMessages(\n  messages: GenerateCopilotResponseMutation[\"generateCopilotResponse\"][\"messages\"],\n): Message[] {\n  return messages.map((message) => {\n    if (message.__typename === \"TextMessageOutput\") {\n      return new TextMessage({\n        id: message.id,\n        role: message.role,\n        content: message.content.join(\"\"),\n        parentMessageId: message.parentMessageId,\n        createdAt: new Date(),\n        status: message.status || { code: MessageStatusCode.Pending },\n      });\n    } else if (message.__typename === \"ActionExecutionMessageOutput\") {\n      return new ActionExecutionMessage({\n        id: message.id,\n        name: message.name,\n        arguments: getPartialArguments(message.arguments),\n        parentMessageId: message.parentMessageId,\n        createdAt: new Date(),\n        status: message.status || { code: MessageStatusCode.Pending },\n      });\n    } else if (message.__typename === \"ResultMessageOutput\") {\n      return new ResultMessage({\n        id: message.id,\n        result: message.result,\n        actionExecutionId: message.actionExecutionId,\n        actionName: message.actionName,\n        createdAt: new Date(),\n        status: message.status || { code: MessageStatusCode.Pending },\n      });\n    } else if (message.__typename === \"AgentStateMessageOutput\") {\n      return new AgentStateMessage({\n        id: message.id,\n        threadId: message.threadId,\n        role: message.role,\n        agentName: message.agentName,\n        nodeName: message.nodeName,\n        runId: message.runId,\n        active: message.active,\n        running: message.running,\n        state: parseJson(message.state, {}),\n        createdAt: new Date(),\n      });\n    } else if (message.__typename === \"ImageMessageOutput\") {\n      return new ImageMessage({\n        id: message.id,\n        format: message.format,\n        bytes: message.bytes,\n        role: message.role,\n        parentMessageId: message.parentMessageId,\n        createdAt: new Date(),\n        status: message.status || { code: MessageStatusCode.Pending },\n      });\n    }\n\n    throw new Error(\"Unknown message type\");\n  });\n}\n\nexport function loadMessagesFromJsonRepresentation(json: any[]): Message[] {\n  const result: Message[] = [];\n  for (const item of json) {\n    if (\"content\" in item) {\n      result.push(\n        new TextMessage({\n          id: item.id,\n          role: item.role,\n          content: item.content,\n          parentMessageId: item.parentMessageId,\n          createdAt: item.createdAt || new Date(),\n          status: item.status || { code: MessageStatusCode.Success },\n        }),\n      );\n    } else if (\"arguments\" in item) {\n      result.push(\n        new ActionExecutionMessage({\n          id: item.id,\n          name: item.name,\n          arguments: item.arguments,\n          parentMessageId: item.parentMessageId,\n          createdAt: item.createdAt || new Date(),\n          status: item.status || { code: MessageStatusCode.Success },\n        }),\n      );\n    } else if (\"result\" in item) {\n      result.push(\n        new ResultMessage({\n          id: item.id,\n          result: item.result,\n          actionExecutionId: item.actionExecutionId,\n          actionName: item.actionName,\n          createdAt: item.createdAt || new Date(),\n          status: item.status || { code: MessageStatusCode.Success },\n        }),\n      );\n    } else if (\"state\" in item) {\n      result.push(\n        new AgentStateMessage({\n          id: item.id,\n          threadId: item.threadId,\n          role: item.role,\n          agentName: item.agentName,\n          nodeName: item.nodeName,\n          runId: item.runId,\n          active: item.active,\n          running: item.running,\n          state: item.state,\n          createdAt: item.createdAt || new Date(),\n        }),\n      );\n    } else if (\"format\" in item && \"bytes\" in item) {\n      result.push(\n        new ImageMessage({\n          id: item.id,\n          format: item.format,\n          bytes: item.bytes,\n          role: item.role,\n          parentMessageId: item.parentMessageId,\n          createdAt: item.createdAt || new Date(),\n          status: item.status || { code: MessageStatusCode.Success },\n        }),\n      );\n    }\n  }\n  return result;\n}\n\nfunction getPartialArguments(args: string[]) {\n  try {\n    if (!args.length) return {};\n\n    return JSON.parse(untruncateJson(args.join(\"\")));\n  } catch (e) {\n    return {};\n  }\n}\n","import * as gql from \"../client\";\nimport { MessageRole } from \"../graphql/@generated/graphql\";\nimport agui from \"@copilotkit/shared\"; // named agui for clarity, but this only includes agui message types\n\n// Helper function to extract agent name from message\nfunction extractAgentName(message: agui.Message): string {\n  if (message.role !== \"assistant\") {\n    throw new Error(`Cannot extract agent name from message with role ${message.role}`);\n  }\n\n  return message.agentName || \"unknown\";\n}\n\n// Type guard for agent state message\nfunction isAgentStateMessage(message: agui.Message): boolean {\n  return message.role === \"assistant\" && \"agentName\" in message && \"state\" in message;\n}\n\n// Type guard for messages with image property\nfunction hasImageProperty(message: agui.Message): boolean {\n  const canContainImage = message.role === \"assistant\" || message.role === \"user\";\n  if (!canContainImage || message.image === undefined) {\n    return false;\n  }\n\n  const isMalformed = message.image.format === undefined || message.image.bytes === undefined;\n  if (isMalformed) {\n    return false;\n  }\n\n  return true;\n}\n\n/*\n  ----------------------------\n  AGUI Message -> GQL Message\n  ----------------------------\n*/\nexport function aguiToGQL(\n  messages: agui.Message[] | agui.Message,\n  actions?: Record<string, any>,\n  coAgentStateRenders?: Record<string, any>,\n): gql.Message[] {\n  const gqlMessages: gql.Message[] = [];\n  messages = Array.isArray(messages) ? messages : [messages];\n\n  // Track tool call names by their IDs for use in result messages\n  const toolCallNames: Record<string, string> = {};\n\n  for (const message of messages) {\n    // Agent state message support\n    if (isAgentStateMessage(message)) {\n      const agentName = extractAgentName(message);\n      const state = \"state\" in message && message.state ? message.state : {};\n      gqlMessages.push(\n        new gql.AgentStateMessage({\n          id: message.id,\n          agentName,\n          state,\n          role: gql.Role.Assistant,\n        }),\n      );\n      // Optionally preserve render function\n      if (\"generativeUI\" in message && message.generativeUI && coAgentStateRenders) {\n        coAgentStateRenders[agentName] = {\n          name: agentName,\n          render: message.generativeUI,\n        };\n      }\n      continue;\n    }\n\n    if (hasImageProperty(message)) {\n      gqlMessages.push(aguiMessageWithImageToGQLMessage(message));\n      continue;\n    }\n\n    // Action execution message support\n    if (message.role === \"assistant\" && message.toolCalls) {\n      gqlMessages.push(aguiTextMessageToGQLMessage(message));\n      for (const toolCall of message.toolCalls) {\n        // Track the tool call name by its ID\n        toolCallNames[toolCall.id] = toolCall.function.name;\n\n        const actionExecMsg = aguiToolCallToGQLActionExecution(toolCall, message.id);\n        // Preserve render function in actions context\n        if (\"generativeUI\" in message && message.generativeUI && actions) {\n          const actionName = toolCall.function.name;\n          // Check for specific action first, then wild card action\n          const specificAction = Object.values(actions).find(\n            (action: any) => action.name === actionName,\n          );\n          const wildcardAction = Object.values(actions).find((action: any) => action.name === \"*\");\n\n          // Assign render function to the matching action (specific takes priority)\n          if (specificAction) {\n            specificAction.render = message.generativeUI;\n          } else if (wildcardAction) {\n            wildcardAction.render = message.generativeUI;\n          }\n        }\n        gqlMessages.push(actionExecMsg);\n      }\n      continue;\n    }\n    // Regular text messages\n    if (\n      message.role === \"developer\" ||\n      message.role === \"system\" ||\n      message.role === \"assistant\" ||\n      message.role === \"user\"\n    ) {\n      gqlMessages.push(aguiTextMessageToGQLMessage(message));\n      continue;\n    }\n    // Tool result message\n    if (message.role === \"tool\") {\n      gqlMessages.push(aguiToolMessageToGQLResultMessage(message, toolCallNames));\n      continue;\n    }\n    throw new Error(\n      `Unknown message role: \"${(message as any).role}\" in message with id: ${(message as any).id}`,\n    );\n  }\n\n  return gqlMessages;\n}\n\nexport function aguiTextMessageToGQLMessage(message: agui.Message): gql.TextMessage {\n  if (\n    message.role !== \"developer\" &&\n    message.role !== \"system\" &&\n    message.role !== \"assistant\" &&\n    message.role !== \"user\"\n  ) {\n    throw new Error(`Cannot convert message with role ${message.role} to TextMessage`);\n  }\n\n  let roleValue: MessageRole;\n\n  if (message.role === \"developer\") {\n    roleValue = gql.Role.Developer;\n  } else if (message.role === \"system\") {\n    roleValue = gql.Role.System;\n  } else if (message.role === \"assistant\") {\n    roleValue = gql.Role.Assistant;\n  } else {\n    roleValue = gql.Role.User;\n  }\n\n  return new gql.TextMessage({\n    id: message.id,\n    content: message.content || \"\",\n    role: roleValue,\n  });\n}\n\nexport function aguiToolCallToGQLActionExecution(\n  toolCall: agui.ToolCall,\n  parentMessageId: string,\n): gql.ActionExecutionMessage {\n  if (toolCall.type !== \"function\") {\n    throw new Error(`Unsupported tool call type: ${toolCall.type}`);\n  }\n\n  // Handle arguments - they should be a JSON string in AGUI format,\n  // but we need to convert them to an object for GQL format\n  let argumentsObj: any;\n\n  if (typeof toolCall.function.arguments === \"string\") {\n    // Expected case: arguments is a JSON string\n    try {\n      argumentsObj = JSON.parse(toolCall.function.arguments);\n    } catch (error) {\n      console.warn(`Failed to parse tool call arguments for ${toolCall.function.name}:`, error);\n      // Provide fallback empty object to prevent application crash\n      argumentsObj = {};\n    }\n  } else if (\n    typeof toolCall.function.arguments === \"object\" &&\n    toolCall.function.arguments !== null\n  ) {\n    // Backward compatibility: arguments is already an object\n    argumentsObj = toolCall.function.arguments;\n  } else {\n    // Fallback for undefined, null, or other types\n    console.warn(\n      `Invalid tool call arguments type for ${toolCall.function.name}:`,\n      typeof toolCall.function.arguments,\n    );\n    argumentsObj = {};\n  }\n\n  // Always include name and arguments\n  return new gql.ActionExecutionMessage({\n    id: toolCall.id,\n    name: toolCall.function.name,\n    arguments: argumentsObj,\n    parentMessageId: parentMessageId,\n  });\n}\n\nexport function aguiToolMessageToGQLResultMessage(\n  message: agui.Message,\n  toolCallNames: Record<string, string>,\n): gql.ResultMessage {\n  if (message.role !== \"tool\") {\n    throw new Error(`Cannot convert message with role ${message.role} to ResultMessage`);\n  }\n\n  if (!message.toolCallId) {\n    throw new Error(\"Tool message must have a toolCallId\");\n  }\n\n  const actionName = toolCallNames[message.toolCallId] || \"unknown\";\n\n  // Handle result content - it could be a string or an object that needs serialization\n  let resultContent: string;\n  const messageContent = message.content || \"\";\n\n  if (typeof messageContent === \"string\") {\n    // Expected case: content is already a string\n    resultContent = messageContent;\n  } else if (typeof messageContent === \"object\" && messageContent !== null) {\n    // Handle case where content is an object that needs to be serialized\n    try {\n      resultContent = JSON.stringify(messageContent);\n    } catch (error) {\n      console.warn(`Failed to stringify tool result for ${actionName}:`, error);\n      resultContent = String(messageContent);\n    }\n  } else {\n    // Handle other types (number, boolean, etc.)\n    resultContent = String(messageContent);\n  }\n\n  return new gql.ResultMessage({\n    id: message.id,\n    result: resultContent,\n    actionExecutionId: message.toolCallId,\n    actionName: message.toolName || actionName,\n  });\n}\n\n// New function to handle AGUI messages with render functions\nexport function aguiMessageWithRenderToGQL(\n  message: agui.Message,\n  actions?: Record<string, any>,\n  coAgentStateRenders?: Record<string, any>,\n): gql.Message[] {\n  // Handle the special case: assistant messages with render function but no tool calls\n  if (\n    message.role === \"assistant\" &&\n    \"generativeUI\" in message &&\n    message.generativeUI &&\n    !message.toolCalls\n  ) {\n    const gqlMessages: gql.Message[] = [];\n    gqlMessages.push(\n      new gql.AgentStateMessage({\n        id: message.id,\n        agentName: \"unknown\",\n        state: {},\n        role: gql.Role.Assistant,\n      }),\n    );\n    if (coAgentStateRenders) {\n      coAgentStateRenders.unknown = {\n        name: \"unknown\",\n        render: message.generativeUI,\n      };\n    }\n    return gqlMessages;\n  }\n\n  // For all other cases, delegate to aguiToGQL\n  return aguiToGQL([message], actions, coAgentStateRenders);\n}\n\nexport function aguiMessageWithImageToGQLMessage(message: agui.Message): gql.ImageMessage {\n  if (!hasImageProperty(message)) {\n    throw new Error(`Cannot convert message to ImageMessage: missing format or bytes`);\n  }\n\n  let roleValue: MessageRole;\n  if (message.role === \"assistant\") {\n    roleValue = gql.Role.Assistant;\n  } else {\n    roleValue = gql.Role.User;\n  }\n\n  if (message.role !== \"assistant\" && message.role !== \"user\") {\n    throw new Error(`Cannot convert message with role ${message.role} to ImageMessage`);\n  }\n\n  return new gql.ImageMessage({\n    id: message.id,\n    format: message.image!.format,\n    bytes: message.image!.bytes,\n    role: roleValue,\n  });\n}\n","import * as gql from \"../client\";\nimport agui from \"@copilotkit/shared\";\nimport { MessageStatusCode } from \"../graphql/@generated/graphql\";\n\n// Define valid image formats based on the supported formats in the codebase\nconst VALID_IMAGE_FORMATS = [\"jpeg\", \"png\", \"webp\", \"gif\"] as const;\ntype ValidImageFormat = (typeof VALID_IMAGE_FORMATS)[number];\n\n// Validation function for image format\nfunction validateImageFormat(format: string): format is ValidImageFormat {\n  return VALID_IMAGE_FORMATS.includes(format as ValidImageFormat);\n}\n\n/*\n  ----------------------------\n  GQL Message -> AGUI Message\n  ----------------------------\n*/\nexport function gqlToAGUI(\n  messages: gql.Message[] | gql.Message,\n  actions?: Record<string, any>,\n  coAgentStateRenders?: Record<string, any>,\n): agui.Message[] {\n  let aguiMessages: agui.Message[] = [];\n  messages = Array.isArray(messages) ? messages : [messages];\n\n  // Create a map of action execution ID to result for completed actions\n  const actionResults = new Map<string, string>();\n  for (const message of messages) {\n    if (message.isResultMessage()) {\n      actionResults.set(message.actionExecutionId, message.result);\n    }\n  }\n\n  for (const message of messages) {\n    if (message.isTextMessage()) {\n      aguiMessages.push(gqlTextMessageToAGUIMessage(message));\n    } else if (message.isResultMessage()) {\n      aguiMessages.push(gqlResultMessageToAGUIMessage(message));\n    } else if (message.isActionExecutionMessage()) {\n      aguiMessages.push(gqlActionExecutionMessageToAGUIMessage(message, actions, actionResults));\n    } else if (message.isAgentStateMessage()) {\n      aguiMessages.push(gqlAgentStateMessageToAGUIMessage(message, coAgentStateRenders));\n    } else if (message.isImageMessage()) {\n      aguiMessages.push(gqlImageMessageToAGUIMessage(message));\n    } else {\n      throw new Error(\"Unknown message type\");\n    }\n  }\n\n  return aguiMessages;\n}\n\nexport function gqlActionExecutionMessageToAGUIMessage(\n  message: gql.ActionExecutionMessage,\n  actions?: Record<string, any>,\n  actionResults?: Map<string, string>,\n): agui.Message {\n  // Check if we have actions and if there's a specific action or wild card action\n  const hasSpecificAction =\n    actions && Object.values(actions).some((action: any) => action.name === message.name);\n  const hasWildcardAction =\n    actions && Object.values(actions).some((action: any) => action.name === \"*\");\n\n  if (!actions || (!hasSpecificAction && !hasWildcardAction)) {\n    return {\n      id: message.id,\n      role: \"assistant\",\n      toolCalls: [actionExecutionMessageToAGUIMessage(message)],\n      name: message.name,\n    };\n  }\n\n  // Find the specific action first, then fall back to wild card action\n  const action =\n    Object.values(actions).find((action: any) => action.name === message.name) ||\n    Object.values(actions).find((action: any) => action.name === \"*\");\n\n  // Create render function wrapper that provides proper props\n  const createRenderWrapper = (originalRender: any) => {\n    if (!originalRender) return undefined;\n\n    return (props?: any) => {\n      // Determine the correct status based on the same logic as RenderActionExecutionMessage\n      let actionResult: any = actionResults?.get(message.id);\n      let status: \"inProgress\" | \"executing\" | \"complete\" = \"inProgress\";\n\n      if (actionResult !== undefined) {\n        status = \"complete\";\n      } else if (message.status?.code !== MessageStatusCode.Pending) {\n        status = \"executing\";\n      }\n\n      // if props.result is a string, parse it as JSON but don't throw an error if it's not valid JSON\n      if (typeof props?.result === \"string\") {\n        try {\n          props.result = JSON.parse(props.result);\n        } catch (e) {\n          /* do nothing */\n        }\n      }\n\n      // if actionResult is a string, parse it as JSON but don't throw an error if it's not valid JSON\n      if (typeof actionResult === \"string\") {\n        try {\n          actionResult = JSON.parse(actionResult);\n        } catch (e) {\n          /* do nothing */\n        }\n      }\n\n      // Base props that all actions receive\n      const baseProps = {\n        status: props?.status || status,\n        args: message.arguments || {},\n        result: props?.result || actionResult || undefined,\n        messageId: message.id,\n      };\n\n      // Add properties based on action type\n      if (action.name === \"*\") {\n        // Wildcard actions get the tool name; ensure it cannot be overridden by incoming props\n        return originalRender({\n          ...baseProps,\n          ...props,\n          name: message.name,\n        });\n      } else {\n        // Regular actions get respond (defaulting to a no-op if not provided)\n        const respond = props?.respond ?? (() => {});\n        return originalRender({\n          ...baseProps,\n          ...props,\n          respond,\n        });\n      }\n    };\n  };\n\n  return {\n    id: message.id,\n    role: \"assistant\",\n    content: \"\",\n    toolCalls: [actionExecutionMessageToAGUIMessage(message)],\n    generativeUI: createRenderWrapper(action.render),\n    name: message.name,\n  } as agui.AIMessage;\n}\n\nfunction gqlAgentStateMessageToAGUIMessage(\n  message: gql.AgentStateMessage,\n  coAgentStateRenders?: Record<string, any>,\n): agui.Message {\n  if (\n    coAgentStateRenders &&\n    Object.values(coAgentStateRenders).some((render: any) => render.name === message.agentName)\n  ) {\n    const render = Object.values(coAgentStateRenders).find(\n      (render: any) => render.name === message.agentName,\n    );\n\n    // Create render function wrapper that provides proper props\n    const createRenderWrapper = (originalRender: any) => {\n      if (!originalRender) return undefined;\n\n      return (props?: any) => {\n        // Determine the correct status based on the same logic as RenderActionExecutionMessage\n        const state = message.state;\n\n        // Provide the full props structure that the render function expects\n        const renderProps = {\n          state: state,\n        };\n\n        return originalRender(renderProps);\n      };\n    };\n\n    return {\n      id: message.id,\n      role: \"assistant\",\n      generativeUI: createRenderWrapper(render.render),\n      agentName: message.agentName,\n      state: message.state,\n    };\n  }\n\n  return {\n    id: message.id,\n    role: \"assistant\",\n    agentName: message.agentName,\n    state: message.state,\n  };\n}\n\nfunction actionExecutionMessageToAGUIMessage(\n  actionExecutionMessage: gql.ActionExecutionMessage,\n): agui.ToolCall {\n  return {\n    id: actionExecutionMessage.id,\n    function: {\n      name: actionExecutionMessage.name,\n      arguments: JSON.stringify(actionExecutionMessage.arguments),\n    },\n    type: \"function\",\n  };\n}\n\nexport function gqlTextMessageToAGUIMessage(message: gql.TextMessage): agui.Message {\n  switch (message.role) {\n    case gql.Role.Developer:\n      return {\n        id: message.id,\n        role: \"developer\",\n        content: message.content,\n      };\n    case gql.Role.System:\n      return {\n        id: message.id,\n        role: \"system\",\n        content: message.content,\n      };\n    case gql.Role.Assistant:\n      return {\n        id: message.id,\n        role: \"assistant\",\n        content: message.content,\n      };\n    case gql.Role.User:\n      return {\n        id: message.id,\n        role: \"user\",\n        content: message.content,\n      };\n    default:\n      throw new Error(\"Unknown message role\");\n  }\n}\n\nexport function gqlResultMessageToAGUIMessage(message: gql.ResultMessage): agui.Message {\n  return {\n    id: message.id,\n    role: \"tool\",\n    content: message.result,\n    toolCallId: message.actionExecutionId,\n    toolName: message.actionName,\n  };\n}\n\nexport function gqlImageMessageToAGUIMessage(message: gql.ImageMessage): agui.Message {\n  // Validate image format\n  if (!validateImageFormat(message.format)) {\n    throw new Error(\n      `Invalid image format: ${message.format}. Supported formats are: ${VALID_IMAGE_FORMATS.join(\", \")}`,\n    );\n  }\n\n  // Validate that bytes is a non-empty string\n  if (!message.bytes || typeof message.bytes !== \"string\" || message.bytes.trim() === \"\") {\n    throw new Error(\"Image bytes must be a non-empty string\");\n  }\n\n  // Determine the role based on the message role\n  const role = message.role === gql.Role.Assistant ? \"assistant\" : \"user\";\n\n  // Create the image message with proper typing\n  const imageMessage: agui.Message = {\n    id: message.id,\n    role,\n    content: \"\",\n    image: {\n      format: message.format,\n      bytes: message.bytes,\n    },\n  };\n\n  return imageMessage;\n}\n"],"mappings":"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","names":["ActionInputAvailability","CopilotRequestType","FailedResponseStatusReason","MessageRole","MessageStatusCode","MetaEventName","ResponseStatusCode","import_shared","import_shared","import_shared","untruncateJson","action","render"]}