{"version":3,"sources":["../src/message-conversion/gql-to-agui.ts"],"sourcesContent":["import * as gql from \"../client\";\nimport agui from \"@copilotkit/shared\";\nimport { MessageStatusCode } from \"../graphql/@generated/graphql\";\n\n// Define valid image formats based on the supported formats in the codebase\nconst VALID_IMAGE_FORMATS = [\"jpeg\", \"png\", \"webp\", \"gif\"] as const;\ntype ValidImageFormat = (typeof VALID_IMAGE_FORMATS)[number];\n\n// Validation function for image format\nfunction validateImageFormat(format: string): format is ValidImageFormat {\n  return VALID_IMAGE_FORMATS.includes(format as ValidImageFormat);\n}\n\n/*\n  ----------------------------\n  GQL Message -> AGUI Message\n  ----------------------------\n*/\nexport function gqlToAGUI(\n  messages: gql.Message[] | gql.Message,\n  actions?: Record<string, any>,\n  coAgentStateRenders?: Record<string, any>,\n): agui.Message[] {\n  let aguiMessages: agui.Message[] = [];\n  messages = Array.isArray(messages) ? messages : [messages];\n\n  // Create a map of action execution ID to result for completed actions\n  const actionResults = new Map<string, string>();\n  for (const message of messages) {\n    if (message.isResultMessage()) {\n      actionResults.set(message.actionExecutionId, message.result);\n    }\n  }\n\n  for (const message of messages) {\n    if (message.isTextMessage()) {\n      aguiMessages.push(gqlTextMessageToAGUIMessage(message));\n    } else if (message.isResultMessage()) {\n      aguiMessages.push(gqlResultMessageToAGUIMessage(message));\n    } else if (message.isActionExecutionMessage()) {\n      aguiMessages.push(gqlActionExecutionMessageToAGUIMessage(message, actions, actionResults));\n    } else if (message.isAgentStateMessage()) {\n      aguiMessages.push(gqlAgentStateMessageToAGUIMessage(message, coAgentStateRenders));\n    } else if (message.isImageMessage()) {\n      aguiMessages.push(gqlImageMessageToAGUIMessage(message));\n    } else {\n      throw new Error(\"Unknown message type\");\n    }\n  }\n\n  return aguiMessages;\n}\n\nexport function gqlActionExecutionMessageToAGUIMessage(\n  message: gql.ActionExecutionMessage,\n  actions?: Record<string, any>,\n  actionResults?: Map<string, string>,\n): agui.Message {\n  // Check if we have actions and if there's a specific action or wild card action\n  const hasSpecificAction =\n    actions && Object.values(actions).some((action: any) => action.name === message.name);\n  const hasWildcardAction =\n    actions && Object.values(actions).some((action: any) => action.name === \"*\");\n\n  if (!actions || (!hasSpecificAction && !hasWildcardAction)) {\n    return {\n      id: message.id,\n      role: \"assistant\",\n      toolCalls: [actionExecutionMessageToAGUIMessage(message)],\n      name: message.name,\n    };\n  }\n\n  // Find the specific action first, then fall back to wild card action\n  const action =\n    Object.values(actions).find((action: any) => action.name === message.name) ||\n    Object.values(actions).find((action: any) => action.name === \"*\");\n\n  // Create render function wrapper that provides proper props\n  const createRenderWrapper = (originalRender: any) => {\n    if (!originalRender) return undefined;\n\n    return (props?: any) => {\n      // Determine the correct status based on the same logic as RenderActionExecutionMessage\n      let actionResult: any = actionResults?.get(message.id);\n      let status: \"inProgress\" | \"executing\" | \"complete\" = \"inProgress\";\n\n      if (actionResult !== undefined) {\n        status = \"complete\";\n      } else if (message.status?.code !== MessageStatusCode.Pending) {\n        status = \"executing\";\n      }\n\n      // if props.result is a string, parse it as JSON but don't throw an error if it's not valid JSON\n      if (typeof props?.result === \"string\") {\n        try {\n          props.result = JSON.parse(props.result);\n        } catch (e) {\n          /* do nothing */\n        }\n      }\n\n      // if actionResult is a string, parse it as JSON but don't throw an error if it's not valid JSON\n      if (typeof actionResult === \"string\") {\n        try {\n          actionResult = JSON.parse(actionResult);\n        } catch (e) {\n          /* do nothing */\n        }\n      }\n\n      // Base props that all actions receive\n      const baseProps = {\n        status: props?.status || status,\n        args: message.arguments || {},\n        result: props?.result || actionResult || undefined,\n        messageId: message.id,\n      };\n\n      // Add properties based on action type\n      if (action.name === \"*\") {\n        // Wildcard actions get the tool name; ensure it cannot be overridden by incoming props\n        return originalRender({\n          ...baseProps,\n          ...props,\n          name: message.name,\n        });\n      } else {\n        // Regular actions get respond (defaulting to a no-op if not provided)\n        const respond = props?.respond ?? (() => {});\n        return originalRender({\n          ...baseProps,\n          ...props,\n          respond,\n        });\n      }\n    };\n  };\n\n  return {\n    id: message.id,\n    role: \"assistant\",\n    content: \"\",\n    toolCalls: [actionExecutionMessageToAGUIMessage(message)],\n    generativeUI: createRenderWrapper(action.render),\n    name: message.name,\n  } as agui.AIMessage;\n}\n\nfunction gqlAgentStateMessageToAGUIMessage(\n  message: gql.AgentStateMessage,\n  coAgentStateRenders?: Record<string, any>,\n): agui.Message {\n  if (\n    coAgentStateRenders &&\n    Object.values(coAgentStateRenders).some((render: any) => render.name === message.agentName)\n  ) {\n    const render = Object.values(coAgentStateRenders).find(\n      (render: any) => render.name === message.agentName,\n    );\n\n    // Create render function wrapper that provides proper props\n    const createRenderWrapper = (originalRender: any) => {\n      if (!originalRender) return undefined;\n\n      return (props?: any) => {\n        // Determine the correct status based on the same logic as RenderActionExecutionMessage\n        const state = message.state;\n\n        // Provide the full props structure that the render function expects\n        const renderProps = {\n          state: state,\n        };\n\n        return originalRender(renderProps);\n      };\n    };\n\n    return {\n      id: message.id,\n      role: \"assistant\",\n      generativeUI: createRenderWrapper(render.render),\n      agentName: message.agentName,\n      state: message.state,\n    };\n  }\n\n  return {\n    id: message.id,\n    role: \"assistant\",\n    agentName: message.agentName,\n    state: message.state,\n  };\n}\n\nfunction actionExecutionMessageToAGUIMessage(\n  actionExecutionMessage: gql.ActionExecutionMessage,\n): agui.ToolCall {\n  return {\n    id: actionExecutionMessage.id,\n    function: {\n      name: actionExecutionMessage.name,\n      arguments: JSON.stringify(actionExecutionMessage.arguments),\n    },\n    type: \"function\",\n  };\n}\n\nexport function gqlTextMessageToAGUIMessage(message: gql.TextMessage): agui.Message {\n  switch (message.role) {\n    case gql.Role.Developer:\n      return {\n        id: message.id,\n        role: \"developer\",\n        content: message.content,\n      };\n    case gql.Role.System:\n      return {\n        id: message.id,\n        role: \"system\",\n        content: message.content,\n      };\n    case gql.Role.Assistant:\n      return {\n        id: message.id,\n        role: \"assistant\",\n        content: message.content,\n      };\n    case gql.Role.User:\n      return {\n        id: message.id,\n        role: \"user\",\n        content: message.content,\n      };\n    default:\n      throw new Error(\"Unknown message role\");\n  }\n}\n\nexport function gqlResultMessageToAGUIMessage(message: gql.ResultMessage): agui.Message {\n  return {\n    id: message.id,\n    role: \"tool\",\n    content: message.result,\n    toolCallId: message.actionExecutionId,\n    toolName: message.actionName,\n  };\n}\n\nexport function gqlImageMessageToAGUIMessage(message: gql.ImageMessage): agui.Message {\n  // Validate image format\n  if (!validateImageFormat(message.format)) {\n    throw new Error(\n      `Invalid image format: ${message.format}. Supported formats are: ${VALID_IMAGE_FORMATS.join(\", \")}`,\n    );\n  }\n\n  // Validate that bytes is a non-empty string\n  if (!message.bytes || typeof message.bytes !== \"string\" || message.bytes.trim() === \"\") {\n    throw new Error(\"Image bytes must be a non-empty string\");\n  }\n\n  // Determine the role based on the message role\n  const role = message.role === gql.Role.Assistant ? \"assistant\" : \"user\";\n\n  // Create the image message with proper typing\n  const imageMessage: agui.Message = {\n    id: message.id,\n    role,\n    content: \"\",\n    image: {\n      format: message.format,\n      bytes: message.bytes,\n    },\n  };\n\n  return imageMessage;\n}\n"],"mappings":"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","names":["action","render"]}