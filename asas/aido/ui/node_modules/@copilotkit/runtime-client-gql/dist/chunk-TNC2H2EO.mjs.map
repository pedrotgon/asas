{"version":3,"sources":["../src/message-conversion/agui-to-gql.ts"],"sourcesContent":["import * as gql from \"../client\";\nimport { MessageRole } from \"../graphql/@generated/graphql\";\nimport agui from \"@copilotkit/shared\"; // named agui for clarity, but this only includes agui message types\n\n// Helper function to extract agent name from message\nfunction extractAgentName(message: agui.Message): string {\n  if (message.role !== \"assistant\") {\n    throw new Error(`Cannot extract agent name from message with role ${message.role}`);\n  }\n\n  return message.agentName || \"unknown\";\n}\n\n// Type guard for agent state message\nfunction isAgentStateMessage(message: agui.Message): boolean {\n  return message.role === \"assistant\" && \"agentName\" in message && \"state\" in message;\n}\n\n// Type guard for messages with image property\nfunction hasImageProperty(message: agui.Message): boolean {\n  const canContainImage = message.role === \"assistant\" || message.role === \"user\";\n  if (!canContainImage || message.image === undefined) {\n    return false;\n  }\n\n  const isMalformed = message.image.format === undefined || message.image.bytes === undefined;\n  if (isMalformed) {\n    return false;\n  }\n\n  return true;\n}\n\n/*\n  ----------------------------\n  AGUI Message -> GQL Message\n  ----------------------------\n*/\nexport function aguiToGQL(\n  messages: agui.Message[] | agui.Message,\n  actions?: Record<string, any>,\n  coAgentStateRenders?: Record<string, any>,\n): gql.Message[] {\n  const gqlMessages: gql.Message[] = [];\n  messages = Array.isArray(messages) ? messages : [messages];\n\n  // Track tool call names by their IDs for use in result messages\n  const toolCallNames: Record<string, string> = {};\n\n  for (const message of messages) {\n    // Agent state message support\n    if (isAgentStateMessage(message)) {\n      const agentName = extractAgentName(message);\n      const state = \"state\" in message && message.state ? message.state : {};\n      gqlMessages.push(\n        new gql.AgentStateMessage({\n          id: message.id,\n          agentName,\n          state,\n          role: gql.Role.Assistant,\n        }),\n      );\n      // Optionally preserve render function\n      if (\"generativeUI\" in message && message.generativeUI && coAgentStateRenders) {\n        coAgentStateRenders[agentName] = {\n          name: agentName,\n          render: message.generativeUI,\n        };\n      }\n      continue;\n    }\n\n    if (hasImageProperty(message)) {\n      gqlMessages.push(aguiMessageWithImageToGQLMessage(message));\n      continue;\n    }\n\n    // Action execution message support\n    if (message.role === \"assistant\" && message.toolCalls) {\n      gqlMessages.push(aguiTextMessageToGQLMessage(message));\n      for (const toolCall of message.toolCalls) {\n        // Track the tool call name by its ID\n        toolCallNames[toolCall.id] = toolCall.function.name;\n\n        const actionExecMsg = aguiToolCallToGQLActionExecution(toolCall, message.id);\n        // Preserve render function in actions context\n        if (\"generativeUI\" in message && message.generativeUI && actions) {\n          const actionName = toolCall.function.name;\n          // Check for specific action first, then wild card action\n          const specificAction = Object.values(actions).find(\n            (action: any) => action.name === actionName,\n          );\n          const wildcardAction = Object.values(actions).find((action: any) => action.name === \"*\");\n\n          // Assign render function to the matching action (specific takes priority)\n          if (specificAction) {\n            specificAction.render = message.generativeUI;\n          } else if (wildcardAction) {\n            wildcardAction.render = message.generativeUI;\n          }\n        }\n        gqlMessages.push(actionExecMsg);\n      }\n      continue;\n    }\n    // Regular text messages\n    if (\n      message.role === \"developer\" ||\n      message.role === \"system\" ||\n      message.role === \"assistant\" ||\n      message.role === \"user\"\n    ) {\n      gqlMessages.push(aguiTextMessageToGQLMessage(message));\n      continue;\n    }\n    // Tool result message\n    if (message.role === \"tool\") {\n      gqlMessages.push(aguiToolMessageToGQLResultMessage(message, toolCallNames));\n      continue;\n    }\n    throw new Error(\n      `Unknown message role: \"${(message as any).role}\" in message with id: ${(message as any).id}`,\n    );\n  }\n\n  return gqlMessages;\n}\n\nexport function aguiTextMessageToGQLMessage(message: agui.Message): gql.TextMessage {\n  if (\n    message.role !== \"developer\" &&\n    message.role !== \"system\" &&\n    message.role !== \"assistant\" &&\n    message.role !== \"user\"\n  ) {\n    throw new Error(`Cannot convert message with role ${message.role} to TextMessage`);\n  }\n\n  let roleValue: MessageRole;\n\n  if (message.role === \"developer\") {\n    roleValue = gql.Role.Developer;\n  } else if (message.role === \"system\") {\n    roleValue = gql.Role.System;\n  } else if (message.role === \"assistant\") {\n    roleValue = gql.Role.Assistant;\n  } else {\n    roleValue = gql.Role.User;\n  }\n\n  return new gql.TextMessage({\n    id: message.id,\n    content: message.content || \"\",\n    role: roleValue,\n  });\n}\n\nexport function aguiToolCallToGQLActionExecution(\n  toolCall: agui.ToolCall,\n  parentMessageId: string,\n): gql.ActionExecutionMessage {\n  if (toolCall.type !== \"function\") {\n    throw new Error(`Unsupported tool call type: ${toolCall.type}`);\n  }\n\n  // Handle arguments - they should be a JSON string in AGUI format,\n  // but we need to convert them to an object for GQL format\n  let argumentsObj: any;\n\n  if (typeof toolCall.function.arguments === \"string\") {\n    // Expected case: arguments is a JSON string\n    try {\n      argumentsObj = JSON.parse(toolCall.function.arguments);\n    } catch (error) {\n      console.warn(`Failed to parse tool call arguments for ${toolCall.function.name}:`, error);\n      // Provide fallback empty object to prevent application crash\n      argumentsObj = {};\n    }\n  } else if (\n    typeof toolCall.function.arguments === \"object\" &&\n    toolCall.function.arguments !== null\n  ) {\n    // Backward compatibility: arguments is already an object\n    argumentsObj = toolCall.function.arguments;\n  } else {\n    // Fallback for undefined, null, or other types\n    console.warn(\n      `Invalid tool call arguments type for ${toolCall.function.name}:`,\n      typeof toolCall.function.arguments,\n    );\n    argumentsObj = {};\n  }\n\n  // Always include name and arguments\n  return new gql.ActionExecutionMessage({\n    id: toolCall.id,\n    name: toolCall.function.name,\n    arguments: argumentsObj,\n    parentMessageId: parentMessageId,\n  });\n}\n\nexport function aguiToolMessageToGQLResultMessage(\n  message: agui.Message,\n  toolCallNames: Record<string, string>,\n): gql.ResultMessage {\n  if (message.role !== \"tool\") {\n    throw new Error(`Cannot convert message with role ${message.role} to ResultMessage`);\n  }\n\n  if (!message.toolCallId) {\n    throw new Error(\"Tool message must have a toolCallId\");\n  }\n\n  const actionName = toolCallNames[message.toolCallId] || \"unknown\";\n\n  // Handle result content - it could be a string or an object that needs serialization\n  let resultContent: string;\n  const messageContent = message.content || \"\";\n\n  if (typeof messageContent === \"string\") {\n    // Expected case: content is already a string\n    resultContent = messageContent;\n  } else if (typeof messageContent === \"object\" && messageContent !== null) {\n    // Handle case where content is an object that needs to be serialized\n    try {\n      resultContent = JSON.stringify(messageContent);\n    } catch (error) {\n      console.warn(`Failed to stringify tool result for ${actionName}:`, error);\n      resultContent = String(messageContent);\n    }\n  } else {\n    // Handle other types (number, boolean, etc.)\n    resultContent = String(messageContent);\n  }\n\n  return new gql.ResultMessage({\n    id: message.id,\n    result: resultContent,\n    actionExecutionId: message.toolCallId,\n    actionName: message.toolName || actionName,\n  });\n}\n\n// New function to handle AGUI messages with render functions\nexport function aguiMessageWithRenderToGQL(\n  message: agui.Message,\n  actions?: Record<string, any>,\n  coAgentStateRenders?: Record<string, any>,\n): gql.Message[] {\n  // Handle the special case: assistant messages with render function but no tool calls\n  if (\n    message.role === \"assistant\" &&\n    \"generativeUI\" in message &&\n    message.generativeUI &&\n    !message.toolCalls\n  ) {\n    const gqlMessages: gql.Message[] = [];\n    gqlMessages.push(\n      new gql.AgentStateMessage({\n        id: message.id,\n        agentName: \"unknown\",\n        state: {},\n        role: gql.Role.Assistant,\n      }),\n    );\n    if (coAgentStateRenders) {\n      coAgentStateRenders.unknown = {\n        name: \"unknown\",\n        render: message.generativeUI,\n      };\n    }\n    return gqlMessages;\n  }\n\n  // For all other cases, delegate to aguiToGQL\n  return aguiToGQL([message], actions, coAgentStateRenders);\n}\n\nexport function aguiMessageWithImageToGQLMessage(message: agui.Message): gql.ImageMessage {\n  if (!hasImageProperty(message)) {\n    throw new Error(`Cannot convert message to ImageMessage: missing format or bytes`);\n  }\n\n  let roleValue: MessageRole;\n  if (message.role === \"assistant\") {\n    roleValue = gql.Role.Assistant;\n  } else {\n    roleValue = gql.Role.User;\n  }\n\n  if (message.role !== \"assistant\" && message.role !== \"user\") {\n    throw new Error(`Cannot convert message with role ${message.role} to ImageMessage`);\n  }\n\n  return new gql.ImageMessage({\n    id: message.id,\n    format: message.image!.format,\n    bytes: message.image!.bytes,\n    role: roleValue,\n  });\n}\n"],"mappings":"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","names":[]}