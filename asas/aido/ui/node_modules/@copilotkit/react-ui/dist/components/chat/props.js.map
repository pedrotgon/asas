{"version":3,"sources":["../../../src/components/chat/props.ts"],"sourcesContent":["import { AIMessage, Message, UserMessage, CopilotErrorEvent } from \"@copilotkit/shared\";\nimport { CopilotChatSuggestion } from \"../../types/suggestions\";\nimport { ReactNode } from \"react\";\nimport { ImageData } from \"@copilotkit/shared\";\n\n/**\n * Event hooks for CopilotKit chat events.\n * These hooks only work when publicApiKey is provided.\n */\nexport interface CopilotObservabilityHooks {\n  /**\n   * Called when a message is sent by the user\n   */\n  onMessageSent?: (message: string) => void;\n\n  /**\n   * Called when the chat is minimized/closed\n   */\n  onChatMinimized?: () => void;\n\n  /**\n   * Called when the chat is expanded/opened\n   */\n  onChatExpanded?: () => void;\n\n  /**\n   * Called when a message is regenerated\n   */\n  onMessageRegenerated?: (messageId: string) => void;\n\n  /**\n   * Called when a message is copied\n   */\n  onMessageCopied?: (content: string) => void;\n\n  /**\n   * Called when feedback is given (thumbs up/down)\n   */\n  onFeedbackGiven?: (messageId: string, type: \"thumbsUp\" | \"thumbsDown\") => void;\n\n  /**\n   * Called when chat generation starts\n   */\n  onChatStarted?: () => void;\n\n  /**\n   * Called when chat generation stops\n   */\n  onChatStopped?: () => void;\n\n  /**\n   * Called when an error occurs in the chat\n   * This enables chat-specific error handling UX while preserving system-wide error monitoring\n   */\n  onError?: (errorEvent: CopilotErrorEvent) => void;\n}\n\nexport interface ButtonProps {}\n\nexport interface WindowProps {\n  clickOutsideToClose: boolean;\n  hitEscapeToClose: boolean;\n  shortcut: string;\n  children?: React.ReactNode;\n}\n\nexport interface HeaderProps {}\n\nexport interface SuggestionsProps {\n  title: string;\n  message: string;\n  partial?: boolean;\n  className?: string;\n  onClick: (message: string) => void;\n}\n\nexport type ComponentsMap<T extends Record<string, object> = Record<string, object>> = {\n  [K in keyof T]: React.FC<{ children?: ReactNode } & T[K]>;\n};\n\nexport interface MessagesProps {\n  messages: Message[];\n  inProgress: boolean;\n  children?: React.ReactNode;\n  chatError?: ChatError | null;\n  AssistantMessage: React.ComponentType<AssistantMessageProps>;\n  UserMessage: React.ComponentType<UserMessageProps>;\n  ErrorMessage?: React.ComponentType<ErrorMessageProps>;\n  RenderMessage: React.ComponentType<RenderMessageProps>;\n  ImageRenderer: React.ComponentType<ImageRendererProps>;\n\n  /**\n   * Callback function to regenerate the assistant's response\n   */\n  onRegenerate?: (messageId: string) => void;\n\n  /**\n   * Callback function when the message is copied\n   */\n  onCopy?: (message: string) => void;\n\n  /**\n   * Callback function for thumbs up feedback\n   */\n  onThumbsUp?: (message: Message) => void;\n\n  /**\n   * Callback function for thumbs down feedback\n   */\n  onThumbsDown?: (message: Message) => void;\n\n  /**\n   * A list of markdown components to render in assistant message.\n   * Useful when you want to render custom elements in the message (e.g a reference tag element)\n   */\n  markdownTagRenderers?: ComponentsMap;\n\n  /**\n   * @deprecated Use RenderMessage instead\n   */\n  RenderTextMessage?: React.ComponentType<RenderMessageProps>;\n\n  /**\n   * @deprecated Use RenderMessage instead\n   */\n  RenderActionExecutionMessage?: React.ComponentType<RenderMessageProps>;\n\n  /**\n   * @deprecated Use RenderMessage instead\n   */\n  RenderAgentStateMessage?: React.ComponentType<RenderMessageProps>;\n\n  /**\n   * @deprecated Use RenderMessage instead\n   */\n  RenderResultMessage?: React.ComponentType<RenderMessageProps>;\n\n  /**\n   * @deprecated Use RenderMessage instead\n   */\n  RenderImageMessage?: React.ComponentType<RenderMessageProps>;\n}\n\nexport interface Renderer {\n  content: string;\n}\n\nexport interface UserMessageProps {\n  message?: UserMessage;\n  ImageRenderer: React.ComponentType<ImageRendererProps>;\n\n  /**\n   * @deprecated use message instead\n   *\n   * The raw data from the assistant's response\n   */\n  rawData: any;\n}\n\nexport interface AssistantMessageProps {\n  /**\n   * The message content from the assistant\n   */\n\n  message?: AIMessage;\n\n  /**\n   * Indicates if this is the last message\n   */\n  isCurrentMessage?: boolean;\n\n  /**\n   * Whether a response is loading, this is when the LLM is thinking of a response but hasn't finished yet.\n   */\n  isLoading: boolean;\n\n  /**\n   * Whether a response is generating, this is when the LLM is actively generating and streaming content.\n   */\n  isGenerating: boolean;\n\n  /**\n   * Callback function to regenerate the assistant's response\n   */\n  onRegenerate?: () => void;\n\n  /**\n   * Callback function when the message is copied\n   */\n  onCopy?: (message: string) => void;\n\n  /**\n   * Callback function for thumbs up feedback\n   */\n  onThumbsUp?: (message: Message) => void;\n\n  /**\n   * Callback function for thumbs down feedback\n   */\n  onThumbsDown?: (message: Message) => void;\n\n  /**\n   * A list of markdown components to render in assistant message.\n   * Useful when you want to render custom elements in the message (e.g a reference tag element)\n   */\n  markdownTagRenderers?: ComponentsMap;\n\n  /**\n   * A custom image rendering component to use instead of the default.\n   */\n  ImageRenderer?: React.ComponentType<ImageRendererProps>;\n\n  /**\n   * @deprecated use message instead\n   *\n   * The raw data from the assistant's response\n   */\n  rawData: any;\n\n  /**\n   *\n   * @deprecated\n   *\n   * use `message.generativeUI()` instead.\n   *\n   * For example:\n   *\n   * ```tsx\n   * const CustomAssistantMessage = ({ message }: AssistantMessageProps) => {\n   *   const subComponent = message?.generativeUI?.();\n   *   return <div>{subComponent}</div>;\n   * };\n   *\n   * ```\n   */\n  subComponent?: React.JSX.Element;\n}\n\nexport interface ErrorMessageProps {\n  /**\n   * The message content from the assistant\n   */\n\n  error: ChatError;\n\n  /**\n   * Indicates if this is the last message\n   */\n  isCurrentMessage?: boolean;\n\n  /**\n   * Callback function to regenerate the assistant's response\n   */\n  onRegenerate?: () => void;\n\n  /**\n   * Callback function when the message is copied\n   */\n  onCopy?: (message: string) => void;\n}\n\nexport interface RenderMessageProps {\n  message: Message;\n  inProgress: boolean;\n  index: number;\n  isCurrentMessage: boolean;\n  actionResult?: string;\n  AssistantMessage?: React.ComponentType<AssistantMessageProps>;\n  UserMessage?: React.ComponentType<UserMessageProps>;\n  ImageRenderer?: React.ComponentType<ImageRendererProps>;\n\n  /**\n   * Callback function to regenerate the assistant's response\n   */\n  onRegenerate?: (messageId: string) => void;\n\n  /**\n   * Callback function when the message is copied\n   */\n  onCopy?: (message: string) => void;\n\n  /**\n   * Callback function for thumbs up feedback\n   */\n  onThumbsUp?: (message: Message) => void;\n\n  /**\n   * Callback function for thumbs down feedback\n   */\n  onThumbsDown?: (message: Message) => void;\n\n  /**\n   * A list of markdown components to render in assistant message.\n   * Useful when you want to render custom elements in the message (e.g a reference tag element)\n   */\n  markdownTagRenderers?: ComponentsMap;\n}\n\nexport interface InputProps {\n  inProgress: boolean;\n  onSend: (text: string) => Promise<Message>;\n  isVisible?: boolean;\n  onStop?: () => void;\n  onUpload?: () => void;\n  hideStopButton?: boolean;\n}\n\nexport interface RenderSuggestionsListProps {\n  suggestions: CopilotChatSuggestion[];\n  onSuggestionClick: (message: string) => void;\n}\n\nexport interface ImageRendererProps {\n  /**\n   * The image data containing format and bytes\n   */\n  image: ImageData;\n\n  /**\n   * Optional content to display alongside the image\n   */\n  content?: string;\n\n  /**\n   * Additional CSS class name for styling\n   */\n  className?: string;\n}\n\nexport interface ChatError {\n  message: string;\n  operation?: string;\n  timestamp: number;\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AAAA;","names":[]}